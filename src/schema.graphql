const {GraphQLUpload} = require('graphql-upload')
const typeDefs = `
scalar Upload
type Query{
    info: String!
    users: [User!]!
    steedsByUser(user:ID!): [Steed!]!
    orderedPlatesByUser(user:ID!): [UsersOnPlates!]!
    orderedHousesByUser(user:ID!): [UsersOnHouses!]!
    orderedProductsByUser(user:ID!): [UsersOnProducts!]!
}
type Mutation{
    signUp(name:String!,phone:String!,email:String!,password:String!,illustration:Upload!,role:String!):User!
    signIn(phone:String!,password:String!):User!
    plat(name:String!,illustration:Upload!,description:String!,price:Float!): Plat!
    house(illustration:Upload!,description:String!,localisation:String!,price:Float!): House!
    steed(pointA:String!,pointB:String!,description:String!,user:ID!): Steed!
    product(name:String!,description:String!,illustration:Upload!,price:Float!): Product!
    orderPlate(user:ID!,plat:ID!,localisation:String!): UsersOnPlates!
    orderHouse(user:ID!,house:ID!): UsersOnHouses!
    orderProduct(user:ID!,product:ID!,localisation:String!): UsersOnProducts!
}
type User{
    id: ID! 
    name: String!
    phone: String!
    email: String!
    password: String!
    illustration: String!
    role : String!
    date : String!
    plates : [UsersOnPlates!]
    houses : [UsersOnHouses!]
    steeds : [Steed!]
    products : [UsersOnProducts!]
}
type UsersOnPlates{
    id : ID! 
    user: User!
    plat : Plat!
    localisation: String!
    date: String!
    ordered: Boolean!
}
type Plat{
    id: ID!
    name: String!
    illustration: String!
    description: String!
    price: Float!
    date : String!
    users : [UsersOnPlates!]
}
type UsersOnHouses{
    id : ID! 
    user: User!
    house : House!
    date: String!
    ordered: Boolean!
}
type House{
    id: ID!
    illustration: String!
    description: String
    localisation: String!
    price : Float!
    date : String!
    users : [UsersOnHouses!]
}

type Steed{
    id : ID!
    pointA : String!
    pointB : String!
    description: String!
    date : String!
    ordered: Boolean!
    user : User!
}
type UsersOnProducts{
    id : ID! 
    user: User!
    product : Product!
    localisation: String!
    date: String!
    ordered: Boolean!
}
type Product{
    id: ID!
    name : String!
    description: String!
    illustration: String!
    price: Float!
    date : String!
    users : [UsersOnProducts!]
}
`
module.exports={
    typeDefs
}