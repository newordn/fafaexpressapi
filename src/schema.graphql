const {GraphQLUpload} = require('graphql-upload')
const typeDefs = `
scalar Upload
type Query{
    info: String!
    users: [User!]!
    steedsByUser(user:ID!): [Steed!]
    steedsByUsers: [Steed!]
    plates: [Plat!]!
    houses: [House!]!
    products: [Product!]!
    orderedPlatesByUser(user:ID!): [UsersOnPlates!]!
    orderedPlatesByUsers: [UsersOnPlates!]!
    orderedHousesByUser(user:ID!): [UsersOnHouses!]!
    orderedHousesByUsers: [UsersOnHouses!]!
    orderedProductsByUser(user:ID!): [UsersOnProducts!]!
    orderedProductsByUsers: [UsersOnProducts!]!
}
type Mutation{
    signUp(name:String!,phone:String!,email:String!,password:String!,role:String!):User!
    signIn(phone:String!,password:String!):User!
    plat(name:String!,illustration:Upload!,description:String!,price:Float!): Plat!
    house(illustration:Upload!,description:String!,localisation:String!,price:Float!): House!
    steed(pointA:String!,pointB:String!,dateCourse:String!,description:String!,user:ID!,phone:String!): Steed!
    product(name:String!,description:String!,illustration:Upload!,price:Float!): Product!
    unOrderPlat(usersOnPlates: ID!): UsersOnPlates!
    unOrderSteed(steed:ID!): Steed!
    unOrderHouse(usersOnHouses: ID!): UsersOnHouses!
    unOrderProduct(usersOnProducts: ID!): UsersOnProducts!
    orderHouses(user:ID!,houses:[ID!]!,phone:String!): UsersOnHouses!
    orderPlates(user:ID!,plats:[ID!]!,localisation:String!,phone:String!,nombre:[Int!]!): UsersOnPlates!
    orderProducts(user:ID!,products:[ID!]!,localisation:String!,phone:String!,nombre:[Int!]!): UsersOnProducts!
}
type User{
    id: ID! 
    name: String!
    phone: String!
    email: String
    password: String!
    role : String!
    date : String!
    plates : [UsersOnPlates!]
    houses : [UsersOnHouses!]
    steeds : [Steed!]
    products : [UsersOnProducts!]
}
type UsersOnPlates{
    id : ID! 
    user: User!
    plat : Plat!
    localisation: String!
    nombre : Int!
    phone: String!
    date: String!
    ordered: Boolean!
}
type Plat{
    id: ID!
    name: String!
    illustration: String!
    description: String!
    price: Float!
    date : String!
    users : [UsersOnPlates!]
}
type UsersOnHouses{
    id : ID! 
    user: User!
    house : House!
    date: String!
    ordered: Boolean!
    phone: String!
}
type House{
    id: ID!
    illustration: String!
    description: String
    localisation: String!
    price : Float!
    date : String!
    users : [UsersOnHouses!]
}

type Steed{
    id : ID!
    pointA : String!
    pointB : String!
    description: String!
    dateCourse: String!
    date : String!
    ordered: Boolean!
    phone: String!
    user : User!
}
type UsersOnProducts{
    id : ID! 
    user: User!
    product : Product!
    date: String!
    ordered: Boolean!
    localisation: String!
    nombre : Int!
    phone: String!
}
type Product{
    id: ID!
    name : String!
    description: String!
    illustration: String!
    price: Float!
    date : String!
    users : [UsersOnProducts!]
}
`
module.exports={
    typeDefs
}