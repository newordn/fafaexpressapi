module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHouse {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePlat {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateSteed {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUsersOnHouses {
  count: Int!
}

type AggregateUsersOnPlates {
  count: Int!
}

type AggregateUsersOnProducts {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type House {
  id: ID!
  illustration: String!
  description: String
  localisation: String!
  price: Float!
  date: DateTime
  archived: Boolean!
}

type HouseConnection {
  pageInfo: PageInfo!
  edges: [HouseEdge]!
  aggregate: AggregateHouse!
}

input HouseCreateInput {
  id: ID
  illustration: String!
  description: String
  localisation: String!
  price: Float!
  archived: Boolean!
}

input HouseCreateOneInput {
  create: HouseCreateInput
  connect: HouseWhereUniqueInput
}

type HouseEdge {
  node: House!
  cursor: String!
}

enum HouseOrderByInput {
  id_ASC
  id_DESC
  illustration_ASC
  illustration_DESC
  description_ASC
  description_DESC
  localisation_ASC
  localisation_DESC
  price_ASC
  price_DESC
  date_ASC
  date_DESC
  archived_ASC
  archived_DESC
}

type HousePreviousValues {
  id: ID!
  illustration: String!
  description: String
  localisation: String!
  price: Float!
  date: DateTime
  archived: Boolean!
}

type HouseSubscriptionPayload {
  mutation: MutationType!
  node: House
  updatedFields: [String!]
  previousValues: HousePreviousValues
}

input HouseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HouseWhereInput
  AND: [HouseSubscriptionWhereInput!]
  OR: [HouseSubscriptionWhereInput!]
  NOT: [HouseSubscriptionWhereInput!]
}

input HouseUpdateDataInput {
  illustration: String
  description: String
  localisation: String
  price: Float
  archived: Boolean
}

input HouseUpdateInput {
  illustration: String
  description: String
  localisation: String
  price: Float
  archived: Boolean
}

input HouseUpdateManyMutationInput {
  illustration: String
  description: String
  localisation: String
  price: Float
  archived: Boolean
}

input HouseUpdateOneRequiredInput {
  create: HouseCreateInput
  update: HouseUpdateDataInput
  upsert: HouseUpsertNestedInput
  connect: HouseWhereUniqueInput
}

input HouseUpsertNestedInput {
  update: HouseUpdateDataInput!
  create: HouseCreateInput!
}

input HouseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  archived: Boolean
  archived_not: Boolean
  AND: [HouseWhereInput!]
  OR: [HouseWhereInput!]
  NOT: [HouseWhereInput!]
}

input HouseWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createHouse(data: HouseCreateInput!): House!
  updateHouse(data: HouseUpdateInput!, where: HouseWhereUniqueInput!): House
  updateManyHouses(data: HouseUpdateManyMutationInput!, where: HouseWhereInput): BatchPayload!
  upsertHouse(where: HouseWhereUniqueInput!, create: HouseCreateInput!, update: HouseUpdateInput!): House!
  deleteHouse(where: HouseWhereUniqueInput!): House
  deleteManyHouses(where: HouseWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createPlat(data: PlatCreateInput!): Plat!
  updatePlat(data: PlatUpdateInput!, where: PlatWhereUniqueInput!): Plat
  updateManyPlats(data: PlatUpdateManyMutationInput!, where: PlatWhereInput): BatchPayload!
  upsertPlat(where: PlatWhereUniqueInput!, create: PlatCreateInput!, update: PlatUpdateInput!): Plat!
  deletePlat(where: PlatWhereUniqueInput!): Plat
  deleteManyPlats(where: PlatWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createSteed(data: SteedCreateInput!): Steed!
  updateSteed(data: SteedUpdateInput!, where: SteedWhereUniqueInput!): Steed
  updateManySteeds(data: SteedUpdateManyMutationInput!, where: SteedWhereInput): BatchPayload!
  upsertSteed(where: SteedWhereUniqueInput!, create: SteedCreateInput!, update: SteedUpdateInput!): Steed!
  deleteSteed(where: SteedWhereUniqueInput!): Steed
  deleteManySteeds(where: SteedWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUsersOnHouses(data: UsersOnHousesCreateInput!): UsersOnHouses!
  updateUsersOnHouses(data: UsersOnHousesUpdateInput!, where: UsersOnHousesWhereUniqueInput!): UsersOnHouses
  updateManyUsersOnHouseses(data: UsersOnHousesUpdateManyMutationInput!, where: UsersOnHousesWhereInput): BatchPayload!
  upsertUsersOnHouses(where: UsersOnHousesWhereUniqueInput!, create: UsersOnHousesCreateInput!, update: UsersOnHousesUpdateInput!): UsersOnHouses!
  deleteUsersOnHouses(where: UsersOnHousesWhereUniqueInput!): UsersOnHouses
  deleteManyUsersOnHouseses(where: UsersOnHousesWhereInput): BatchPayload!
  createUsersOnPlates(data: UsersOnPlatesCreateInput!): UsersOnPlates!
  updateUsersOnPlates(data: UsersOnPlatesUpdateInput!, where: UsersOnPlatesWhereUniqueInput!): UsersOnPlates
  updateManyUsersOnPlateses(data: UsersOnPlatesUpdateManyMutationInput!, where: UsersOnPlatesWhereInput): BatchPayload!
  upsertUsersOnPlates(where: UsersOnPlatesWhereUniqueInput!, create: UsersOnPlatesCreateInput!, update: UsersOnPlatesUpdateInput!): UsersOnPlates!
  deleteUsersOnPlates(where: UsersOnPlatesWhereUniqueInput!): UsersOnPlates
  deleteManyUsersOnPlateses(where: UsersOnPlatesWhereInput): BatchPayload!
  createUsersOnProducts(data: UsersOnProductsCreateInput!): UsersOnProducts!
  updateUsersOnProducts(data: UsersOnProductsUpdateInput!, where: UsersOnProductsWhereUniqueInput!): UsersOnProducts
  updateManyUsersOnProductses(data: UsersOnProductsUpdateManyMutationInput!, where: UsersOnProductsWhereInput): BatchPayload!
  upsertUsersOnProducts(where: UsersOnProductsWhereUniqueInput!, create: UsersOnProductsCreateInput!, update: UsersOnProductsUpdateInput!): UsersOnProducts!
  deleteUsersOnProducts(where: UsersOnProductsWhereUniqueInput!): UsersOnProducts
  deleteManyUsersOnProductses(where: UsersOnProductsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  title: String!
  bigText: String!
  message: String!
  subText: String!
  date: DateTime!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  title: String!
  bigText: String!
  message: String!
  subText: String!
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  bigText_ASC
  bigText_DESC
  message_ASC
  message_DESC
  subText_ASC
  subText_DESC
  date_ASC
  date_DESC
}

type NotificationPreviousValues {
  id: ID!
  title: String!
  bigText: String!
  message: String!
  subText: String!
  date: DateTime!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  title: String
  bigText: String
  message: String
  subText: String
}

input NotificationUpdateManyMutationInput {
  title: String
  bigText: String
  message: String
  subText: String
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  bigText: String
  bigText_not: String
  bigText_in: [String!]
  bigText_not_in: [String!]
  bigText_lt: String
  bigText_lte: String
  bigText_gt: String
  bigText_gte: String
  bigText_contains: String
  bigText_not_contains: String
  bigText_starts_with: String
  bigText_not_starts_with: String
  bigText_ends_with: String
  bigText_not_ends_with: String
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  subText: String
  subText_not: String
  subText_in: [String!]
  subText_not_in: [String!]
  subText_lt: String
  subText_lte: String
  subText_gt: String
  subText_gte: String
  subText_contains: String
  subText_not_contains: String
  subText_starts_with: String
  subText_not_starts_with: String
  subText_ends_with: String
  subText_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Plat {
  id: ID!
  name: String!
  illustration: String!
  description: String!
  price: Float!
  date: DateTime
  users(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnPlates!]
  archived: Boolean!
}

type PlatConnection {
  pageInfo: PageInfo!
  edges: [PlatEdge]!
  aggregate: AggregatePlat!
}

input PlatCreateInput {
  id: ID
  name: String!
  illustration: String!
  description: String!
  price: Float!
  users: UsersOnPlatesCreateManyWithoutPlatInput
  archived: Boolean!
}

input PlatCreateOneWithoutUsersInput {
  create: PlatCreateWithoutUsersInput
  connect: PlatWhereUniqueInput
}

input PlatCreateWithoutUsersInput {
  id: ID
  name: String!
  illustration: String!
  description: String!
  price: Float!
  archived: Boolean!
}

type PlatEdge {
  node: Plat!
  cursor: String!
}

enum PlatOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  illustration_ASC
  illustration_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  date_ASC
  date_DESC
  archived_ASC
  archived_DESC
}

type PlatPreviousValues {
  id: ID!
  name: String!
  illustration: String!
  description: String!
  price: Float!
  date: DateTime
  archived: Boolean!
}

type PlatSubscriptionPayload {
  mutation: MutationType!
  node: Plat
  updatedFields: [String!]
  previousValues: PlatPreviousValues
}

input PlatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlatWhereInput
  AND: [PlatSubscriptionWhereInput!]
  OR: [PlatSubscriptionWhereInput!]
  NOT: [PlatSubscriptionWhereInput!]
}

input PlatUpdateInput {
  name: String
  illustration: String
  description: String
  price: Float
  users: UsersOnPlatesUpdateManyWithoutPlatInput
  archived: Boolean
}

input PlatUpdateManyMutationInput {
  name: String
  illustration: String
  description: String
  price: Float
  archived: Boolean
}

input PlatUpdateOneRequiredWithoutUsersInput {
  create: PlatCreateWithoutUsersInput
  update: PlatUpdateWithoutUsersDataInput
  upsert: PlatUpsertWithoutUsersInput
  connect: PlatWhereUniqueInput
}

input PlatUpdateWithoutUsersDataInput {
  name: String
  illustration: String
  description: String
  price: Float
  archived: Boolean
}

input PlatUpsertWithoutUsersInput {
  update: PlatUpdateWithoutUsersDataInput!
  create: PlatCreateWithoutUsersInput!
}

input PlatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  users_every: UsersOnPlatesWhereInput
  users_some: UsersOnPlatesWhereInput
  users_none: UsersOnPlatesWhereInput
  archived: Boolean
  archived_not: Boolean
  AND: [PlatWhereInput!]
  OR: [PlatWhereInput!]
  NOT: [PlatWhereInput!]
}

input PlatWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  name: String!
  description: String!
  illustration: String!
  price: Float!
  date: DateTime
  archived: Boolean!
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  description: String!
  illustration: String!
  price: Float!
  archived: Boolean!
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  illustration_ASC
  illustration_DESC
  price_ASC
  price_DESC
  date_ASC
  date_DESC
  archived_ASC
  archived_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  description: String!
  illustration: String!
  price: Float!
  date: DateTime
  archived: Boolean!
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  name: String
  description: String
  illustration: String
  price: Float
  archived: Boolean
}

input ProductUpdateInput {
  name: String
  description: String
  illustration: String
  price: Float
  archived: Boolean
}

input ProductUpdateManyMutationInput {
  name: String
  description: String
  illustration: String
  price: Float
  archived: Boolean
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  archived: Boolean
  archived_not: Boolean
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  house(where: HouseWhereUniqueInput!): House
  houses(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [House]!
  housesConnection(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HouseConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  plat(where: PlatWhereUniqueInput!): Plat
  plats(where: PlatWhereInput, orderBy: PlatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plat]!
  platsConnection(where: PlatWhereInput, orderBy: PlatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlatConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  steed(where: SteedWhereUniqueInput!): Steed
  steeds(where: SteedWhereInput, orderBy: SteedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Steed]!
  steedsConnection(where: SteedWhereInput, orderBy: SteedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SteedConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  usersOnHouses(where: UsersOnHousesWhereUniqueInput!): UsersOnHouses
  usersOnHouseses(where: UsersOnHousesWhereInput, orderBy: UsersOnHousesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnHouses]!
  usersOnHousesesConnection(where: UsersOnHousesWhereInput, orderBy: UsersOnHousesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersOnHousesConnection!
  usersOnPlates(where: UsersOnPlatesWhereUniqueInput!): UsersOnPlates
  usersOnPlateses(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnPlates]!
  usersOnPlatesesConnection(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersOnPlatesConnection!
  usersOnProducts(where: UsersOnProductsWhereUniqueInput!): UsersOnProducts
  usersOnProductses(where: UsersOnProductsWhereInput, orderBy: UsersOnProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnProducts]!
  usersOnProductsesConnection(where: UsersOnProductsWhereInput, orderBy: UsersOnProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersOnProductsConnection!
  node(id: ID!): Node
}

type Steed {
  id: ID!
  pointA: String!
  pointB: String!
  description: String!
  dateCourse: String!
  date: DateTime
  ordered: Boolean!
  phone: String!
  user: User!
}

type SteedConnection {
  pageInfo: PageInfo!
  edges: [SteedEdge]!
  aggregate: AggregateSteed!
}

input SteedCreateInput {
  id: ID
  pointA: String!
  pointB: String!
  description: String!
  dateCourse: String!
  ordered: Boolean!
  phone: String!
  user: UserCreateOneWithoutSteedsInput!
}

input SteedCreateManyWithoutUserInput {
  create: [SteedCreateWithoutUserInput!]
  connect: [SteedWhereUniqueInput!]
}

input SteedCreateWithoutUserInput {
  id: ID
  pointA: String!
  pointB: String!
  description: String!
  dateCourse: String!
  ordered: Boolean!
  phone: String!
}

type SteedEdge {
  node: Steed!
  cursor: String!
}

enum SteedOrderByInput {
  id_ASC
  id_DESC
  pointA_ASC
  pointA_DESC
  pointB_ASC
  pointB_DESC
  description_ASC
  description_DESC
  dateCourse_ASC
  dateCourse_DESC
  date_ASC
  date_DESC
  ordered_ASC
  ordered_DESC
  phone_ASC
  phone_DESC
}

type SteedPreviousValues {
  id: ID!
  pointA: String!
  pointB: String!
  description: String!
  dateCourse: String!
  date: DateTime
  ordered: Boolean!
  phone: String!
}

input SteedScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  pointA: String
  pointA_not: String
  pointA_in: [String!]
  pointA_not_in: [String!]
  pointA_lt: String
  pointA_lte: String
  pointA_gt: String
  pointA_gte: String
  pointA_contains: String
  pointA_not_contains: String
  pointA_starts_with: String
  pointA_not_starts_with: String
  pointA_ends_with: String
  pointA_not_ends_with: String
  pointB: String
  pointB_not: String
  pointB_in: [String!]
  pointB_not_in: [String!]
  pointB_lt: String
  pointB_lte: String
  pointB_gt: String
  pointB_gte: String
  pointB_contains: String
  pointB_not_contains: String
  pointB_starts_with: String
  pointB_not_starts_with: String
  pointB_ends_with: String
  pointB_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  dateCourse: String
  dateCourse_not: String
  dateCourse_in: [String!]
  dateCourse_not_in: [String!]
  dateCourse_lt: String
  dateCourse_lte: String
  dateCourse_gt: String
  dateCourse_gte: String
  dateCourse_contains: String
  dateCourse_not_contains: String
  dateCourse_starts_with: String
  dateCourse_not_starts_with: String
  dateCourse_ends_with: String
  dateCourse_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  ordered: Boolean
  ordered_not: Boolean
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  AND: [SteedScalarWhereInput!]
  OR: [SteedScalarWhereInput!]
  NOT: [SteedScalarWhereInput!]
}

type SteedSubscriptionPayload {
  mutation: MutationType!
  node: Steed
  updatedFields: [String!]
  previousValues: SteedPreviousValues
}

input SteedSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SteedWhereInput
  AND: [SteedSubscriptionWhereInput!]
  OR: [SteedSubscriptionWhereInput!]
  NOT: [SteedSubscriptionWhereInput!]
}

input SteedUpdateInput {
  pointA: String
  pointB: String
  description: String
  dateCourse: String
  ordered: Boolean
  phone: String
  user: UserUpdateOneRequiredWithoutSteedsInput
}

input SteedUpdateManyDataInput {
  pointA: String
  pointB: String
  description: String
  dateCourse: String
  ordered: Boolean
  phone: String
}

input SteedUpdateManyMutationInput {
  pointA: String
  pointB: String
  description: String
  dateCourse: String
  ordered: Boolean
  phone: String
}

input SteedUpdateManyWithoutUserInput {
  create: [SteedCreateWithoutUserInput!]
  delete: [SteedWhereUniqueInput!]
  connect: [SteedWhereUniqueInput!]
  set: [SteedWhereUniqueInput!]
  disconnect: [SteedWhereUniqueInput!]
  update: [SteedUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SteedUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SteedScalarWhereInput!]
  updateMany: [SteedUpdateManyWithWhereNestedInput!]
}

input SteedUpdateManyWithWhereNestedInput {
  where: SteedScalarWhereInput!
  data: SteedUpdateManyDataInput!
}

input SteedUpdateWithoutUserDataInput {
  pointA: String
  pointB: String
  description: String
  dateCourse: String
  ordered: Boolean
  phone: String
}

input SteedUpdateWithWhereUniqueWithoutUserInput {
  where: SteedWhereUniqueInput!
  data: SteedUpdateWithoutUserDataInput!
}

input SteedUpsertWithWhereUniqueWithoutUserInput {
  where: SteedWhereUniqueInput!
  update: SteedUpdateWithoutUserDataInput!
  create: SteedCreateWithoutUserInput!
}

input SteedWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  pointA: String
  pointA_not: String
  pointA_in: [String!]
  pointA_not_in: [String!]
  pointA_lt: String
  pointA_lte: String
  pointA_gt: String
  pointA_gte: String
  pointA_contains: String
  pointA_not_contains: String
  pointA_starts_with: String
  pointA_not_starts_with: String
  pointA_ends_with: String
  pointA_not_ends_with: String
  pointB: String
  pointB_not: String
  pointB_in: [String!]
  pointB_not_in: [String!]
  pointB_lt: String
  pointB_lte: String
  pointB_gt: String
  pointB_gte: String
  pointB_contains: String
  pointB_not_contains: String
  pointB_starts_with: String
  pointB_not_starts_with: String
  pointB_ends_with: String
  pointB_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  dateCourse: String
  dateCourse_not: String
  dateCourse_in: [String!]
  dateCourse_not_in: [String!]
  dateCourse_lt: String
  dateCourse_lte: String
  dateCourse_gt: String
  dateCourse_gte: String
  dateCourse_contains: String
  dateCourse_not_contains: String
  dateCourse_starts_with: String
  dateCourse_not_starts_with: String
  dateCourse_ends_with: String
  dateCourse_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  ordered: Boolean
  ordered_not: Boolean
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  user: UserWhereInput
  AND: [SteedWhereInput!]
  OR: [SteedWhereInput!]
  NOT: [SteedWhereInput!]
}

input SteedWhereUniqueInput {
  id: ID
}

type Subscription {
  house(where: HouseSubscriptionWhereInput): HouseSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  plat(where: PlatSubscriptionWhereInput): PlatSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  steed(where: SteedSubscriptionWhereInput): SteedSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  usersOnHouses(where: UsersOnHousesSubscriptionWhereInput): UsersOnHousesSubscriptionPayload
  usersOnPlates(where: UsersOnPlatesSubscriptionWhereInput): UsersOnPlatesSubscriptionPayload
  usersOnProducts(where: UsersOnProductsSubscriptionWhereInput): UsersOnProductsSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  phone: String!
  email: String
  password: String!
  role: String!
  date: DateTime
  plates(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnPlates!]
  houses(where: UsersOnHousesWhereInput, orderBy: UsersOnHousesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnHouses!]
  products(where: UsersOnProductsWhereInput, orderBy: UsersOnProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnProducts!]
  steeds(where: SteedWhereInput, orderBy: SteedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Steed!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  phone: String!
  email: String
  password: String!
  role: String!
  plates: UsersOnPlatesCreateManyWithoutUserInput
  houses: UsersOnHousesCreateManyWithoutUserInput
  products: UsersOnProductsCreateManyWithoutUserInput
  steeds: SteedCreateManyWithoutUserInput
}

input UserCreateOneWithoutHousesInput {
  create: UserCreateWithoutHousesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlatesInput {
  create: UserCreateWithoutPlatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProductsInput {
  create: UserCreateWithoutProductsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSteedsInput {
  create: UserCreateWithoutSteedsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutHousesInput {
  id: ID
  name: String!
  phone: String!
  email: String
  password: String!
  role: String!
  plates: UsersOnPlatesCreateManyWithoutUserInput
  products: UsersOnProductsCreateManyWithoutUserInput
  steeds: SteedCreateManyWithoutUserInput
}

input UserCreateWithoutPlatesInput {
  id: ID
  name: String!
  phone: String!
  email: String
  password: String!
  role: String!
  houses: UsersOnHousesCreateManyWithoutUserInput
  products: UsersOnProductsCreateManyWithoutUserInput
  steeds: SteedCreateManyWithoutUserInput
}

input UserCreateWithoutProductsInput {
  id: ID
  name: String!
  phone: String!
  email: String
  password: String!
  role: String!
  plates: UsersOnPlatesCreateManyWithoutUserInput
  houses: UsersOnHousesCreateManyWithoutUserInput
  steeds: SteedCreateManyWithoutUserInput
}

input UserCreateWithoutSteedsInput {
  id: ID
  name: String!
  phone: String!
  email: String
  password: String!
  role: String!
  plates: UsersOnPlatesCreateManyWithoutUserInput
  houses: UsersOnHousesCreateManyWithoutUserInput
  products: UsersOnProductsCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  date_ASC
  date_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  phone: String!
  email: String
  password: String!
  role: String!
  date: DateTime
}

type UsersOnHouses {
  id: ID!
  user: User!
  house: House!
  ordered: Boolean!
  phone: String!
  date: DateTime
}

type UsersOnHousesConnection {
  pageInfo: PageInfo!
  edges: [UsersOnHousesEdge]!
  aggregate: AggregateUsersOnHouses!
}

input UsersOnHousesCreateInput {
  id: ID
  user: UserCreateOneWithoutHousesInput!
  house: HouseCreateOneInput!
  ordered: Boolean!
  phone: String!
}

input UsersOnHousesCreateManyWithoutUserInput {
  create: [UsersOnHousesCreateWithoutUserInput!]
  connect: [UsersOnHousesWhereUniqueInput!]
}

input UsersOnHousesCreateWithoutUserInput {
  id: ID
  house: HouseCreateOneInput!
  ordered: Boolean!
  phone: String!
}

type UsersOnHousesEdge {
  node: UsersOnHouses!
  cursor: String!
}

enum UsersOnHousesOrderByInput {
  id_ASC
  id_DESC
  ordered_ASC
  ordered_DESC
  phone_ASC
  phone_DESC
  date_ASC
  date_DESC
}

type UsersOnHousesPreviousValues {
  id: ID!
  ordered: Boolean!
  phone: String!
  date: DateTime
}

input UsersOnHousesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ordered: Boolean
  ordered_not: Boolean
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UsersOnHousesScalarWhereInput!]
  OR: [UsersOnHousesScalarWhereInput!]
  NOT: [UsersOnHousesScalarWhereInput!]
}

type UsersOnHousesSubscriptionPayload {
  mutation: MutationType!
  node: UsersOnHouses
  updatedFields: [String!]
  previousValues: UsersOnHousesPreviousValues
}

input UsersOnHousesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UsersOnHousesWhereInput
  AND: [UsersOnHousesSubscriptionWhereInput!]
  OR: [UsersOnHousesSubscriptionWhereInput!]
  NOT: [UsersOnHousesSubscriptionWhereInput!]
}

input UsersOnHousesUpdateInput {
  user: UserUpdateOneRequiredWithoutHousesInput
  house: HouseUpdateOneRequiredInput
  ordered: Boolean
  phone: String
}

input UsersOnHousesUpdateManyDataInput {
  ordered: Boolean
  phone: String
}

input UsersOnHousesUpdateManyMutationInput {
  ordered: Boolean
  phone: String
}

input UsersOnHousesUpdateManyWithoutUserInput {
  create: [UsersOnHousesCreateWithoutUserInput!]
  delete: [UsersOnHousesWhereUniqueInput!]
  connect: [UsersOnHousesWhereUniqueInput!]
  set: [UsersOnHousesWhereUniqueInput!]
  disconnect: [UsersOnHousesWhereUniqueInput!]
  update: [UsersOnHousesUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UsersOnHousesUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UsersOnHousesScalarWhereInput!]
  updateMany: [UsersOnHousesUpdateManyWithWhereNestedInput!]
}

input UsersOnHousesUpdateManyWithWhereNestedInput {
  where: UsersOnHousesScalarWhereInput!
  data: UsersOnHousesUpdateManyDataInput!
}

input UsersOnHousesUpdateWithoutUserDataInput {
  house: HouseUpdateOneRequiredInput
  ordered: Boolean
  phone: String
}

input UsersOnHousesUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnHousesWhereUniqueInput!
  data: UsersOnHousesUpdateWithoutUserDataInput!
}

input UsersOnHousesUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnHousesWhereUniqueInput!
  update: UsersOnHousesUpdateWithoutUserDataInput!
  create: UsersOnHousesCreateWithoutUserInput!
}

input UsersOnHousesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  house: HouseWhereInput
  ordered: Boolean
  ordered_not: Boolean
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UsersOnHousesWhereInput!]
  OR: [UsersOnHousesWhereInput!]
  NOT: [UsersOnHousesWhereInput!]
}

input UsersOnHousesWhereUniqueInput {
  id: ID
}

type UsersOnPlates {
  id: ID!
  user: User!
  plat: Plat!
  localisation: String!
  ordered: Boolean!
  nombre: Int!
  phone: String!
  date: DateTime
}

type UsersOnPlatesConnection {
  pageInfo: PageInfo!
  edges: [UsersOnPlatesEdge]!
  aggregate: AggregateUsersOnPlates!
}

input UsersOnPlatesCreateInput {
  id: ID
  user: UserCreateOneWithoutPlatesInput!
  plat: PlatCreateOneWithoutUsersInput!
  localisation: String!
  ordered: Boolean!
  nombre: Int!
  phone: String!
}

input UsersOnPlatesCreateManyWithoutPlatInput {
  create: [UsersOnPlatesCreateWithoutPlatInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
}

input UsersOnPlatesCreateManyWithoutUserInput {
  create: [UsersOnPlatesCreateWithoutUserInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
}

input UsersOnPlatesCreateWithoutPlatInput {
  id: ID
  user: UserCreateOneWithoutPlatesInput!
  localisation: String!
  ordered: Boolean!
  nombre: Int!
  phone: String!
}

input UsersOnPlatesCreateWithoutUserInput {
  id: ID
  plat: PlatCreateOneWithoutUsersInput!
  localisation: String!
  ordered: Boolean!
  nombre: Int!
  phone: String!
}

type UsersOnPlatesEdge {
  node: UsersOnPlates!
  cursor: String!
}

enum UsersOnPlatesOrderByInput {
  id_ASC
  id_DESC
  localisation_ASC
  localisation_DESC
  ordered_ASC
  ordered_DESC
  nombre_ASC
  nombre_DESC
  phone_ASC
  phone_DESC
  date_ASC
  date_DESC
}

type UsersOnPlatesPreviousValues {
  id: ID!
  localisation: String!
  ordered: Boolean!
  nombre: Int!
  phone: String!
  date: DateTime
}

input UsersOnPlatesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  ordered: Boolean
  ordered_not: Boolean
  nombre: Int
  nombre_not: Int
  nombre_in: [Int!]
  nombre_not_in: [Int!]
  nombre_lt: Int
  nombre_lte: Int
  nombre_gt: Int
  nombre_gte: Int
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UsersOnPlatesScalarWhereInput!]
  OR: [UsersOnPlatesScalarWhereInput!]
  NOT: [UsersOnPlatesScalarWhereInput!]
}

type UsersOnPlatesSubscriptionPayload {
  mutation: MutationType!
  node: UsersOnPlates
  updatedFields: [String!]
  previousValues: UsersOnPlatesPreviousValues
}

input UsersOnPlatesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UsersOnPlatesWhereInput
  AND: [UsersOnPlatesSubscriptionWhereInput!]
  OR: [UsersOnPlatesSubscriptionWhereInput!]
  NOT: [UsersOnPlatesSubscriptionWhereInput!]
}

input UsersOnPlatesUpdateInput {
  user: UserUpdateOneRequiredWithoutPlatesInput
  plat: PlatUpdateOneRequiredWithoutUsersInput
  localisation: String
  ordered: Boolean
  nombre: Int
  phone: String
}

input UsersOnPlatesUpdateManyDataInput {
  localisation: String
  ordered: Boolean
  nombre: Int
  phone: String
}

input UsersOnPlatesUpdateManyMutationInput {
  localisation: String
  ordered: Boolean
  nombre: Int
  phone: String
}

input UsersOnPlatesUpdateManyWithoutPlatInput {
  create: [UsersOnPlatesCreateWithoutPlatInput!]
  delete: [UsersOnPlatesWhereUniqueInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
  set: [UsersOnPlatesWhereUniqueInput!]
  disconnect: [UsersOnPlatesWhereUniqueInput!]
  update: [UsersOnPlatesUpdateWithWhereUniqueWithoutPlatInput!]
  upsert: [UsersOnPlatesUpsertWithWhereUniqueWithoutPlatInput!]
  deleteMany: [UsersOnPlatesScalarWhereInput!]
  updateMany: [UsersOnPlatesUpdateManyWithWhereNestedInput!]
}

input UsersOnPlatesUpdateManyWithoutUserInput {
  create: [UsersOnPlatesCreateWithoutUserInput!]
  delete: [UsersOnPlatesWhereUniqueInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
  set: [UsersOnPlatesWhereUniqueInput!]
  disconnect: [UsersOnPlatesWhereUniqueInput!]
  update: [UsersOnPlatesUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UsersOnPlatesUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UsersOnPlatesScalarWhereInput!]
  updateMany: [UsersOnPlatesUpdateManyWithWhereNestedInput!]
}

input UsersOnPlatesUpdateManyWithWhereNestedInput {
  where: UsersOnPlatesScalarWhereInput!
  data: UsersOnPlatesUpdateManyDataInput!
}

input UsersOnPlatesUpdateWithoutPlatDataInput {
  user: UserUpdateOneRequiredWithoutPlatesInput
  localisation: String
  ordered: Boolean
  nombre: Int
  phone: String
}

input UsersOnPlatesUpdateWithoutUserDataInput {
  plat: PlatUpdateOneRequiredWithoutUsersInput
  localisation: String
  ordered: Boolean
  nombre: Int
  phone: String
}

input UsersOnPlatesUpdateWithWhereUniqueWithoutPlatInput {
  where: UsersOnPlatesWhereUniqueInput!
  data: UsersOnPlatesUpdateWithoutPlatDataInput!
}

input UsersOnPlatesUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnPlatesWhereUniqueInput!
  data: UsersOnPlatesUpdateWithoutUserDataInput!
}

input UsersOnPlatesUpsertWithWhereUniqueWithoutPlatInput {
  where: UsersOnPlatesWhereUniqueInput!
  update: UsersOnPlatesUpdateWithoutPlatDataInput!
  create: UsersOnPlatesCreateWithoutPlatInput!
}

input UsersOnPlatesUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnPlatesWhereUniqueInput!
  update: UsersOnPlatesUpdateWithoutUserDataInput!
  create: UsersOnPlatesCreateWithoutUserInput!
}

input UsersOnPlatesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  plat: PlatWhereInput
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  ordered: Boolean
  ordered_not: Boolean
  nombre: Int
  nombre_not: Int
  nombre_in: [Int!]
  nombre_not_in: [Int!]
  nombre_lt: Int
  nombre_lte: Int
  nombre_gt: Int
  nombre_gte: Int
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UsersOnPlatesWhereInput!]
  OR: [UsersOnPlatesWhereInput!]
  NOT: [UsersOnPlatesWhereInput!]
}

input UsersOnPlatesWhereUniqueInput {
  id: ID
}

type UsersOnProducts {
  id: ID!
  user: User!
  product: Product!
  localisation: String!
  nombre: Int!
  phone: String!
  date: DateTime
  ordered: Boolean!
}

type UsersOnProductsConnection {
  pageInfo: PageInfo!
  edges: [UsersOnProductsEdge]!
  aggregate: AggregateUsersOnProducts!
}

input UsersOnProductsCreateInput {
  id: ID
  user: UserCreateOneWithoutProductsInput!
  product: ProductCreateOneInput!
  localisation: String!
  nombre: Int!
  phone: String!
  ordered: Boolean!
}

input UsersOnProductsCreateManyWithoutUserInput {
  create: [UsersOnProductsCreateWithoutUserInput!]
  connect: [UsersOnProductsWhereUniqueInput!]
}

input UsersOnProductsCreateWithoutUserInput {
  id: ID
  product: ProductCreateOneInput!
  localisation: String!
  nombre: Int!
  phone: String!
  ordered: Boolean!
}

type UsersOnProductsEdge {
  node: UsersOnProducts!
  cursor: String!
}

enum UsersOnProductsOrderByInput {
  id_ASC
  id_DESC
  localisation_ASC
  localisation_DESC
  nombre_ASC
  nombre_DESC
  phone_ASC
  phone_DESC
  date_ASC
  date_DESC
  ordered_ASC
  ordered_DESC
}

type UsersOnProductsPreviousValues {
  id: ID!
  localisation: String!
  nombre: Int!
  phone: String!
  date: DateTime
  ordered: Boolean!
}

input UsersOnProductsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  nombre: Int
  nombre_not: Int
  nombre_in: [Int!]
  nombre_not_in: [Int!]
  nombre_lt: Int
  nombre_lte: Int
  nombre_gt: Int
  nombre_gte: Int
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  ordered: Boolean
  ordered_not: Boolean
  AND: [UsersOnProductsScalarWhereInput!]
  OR: [UsersOnProductsScalarWhereInput!]
  NOT: [UsersOnProductsScalarWhereInput!]
}

type UsersOnProductsSubscriptionPayload {
  mutation: MutationType!
  node: UsersOnProducts
  updatedFields: [String!]
  previousValues: UsersOnProductsPreviousValues
}

input UsersOnProductsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UsersOnProductsWhereInput
  AND: [UsersOnProductsSubscriptionWhereInput!]
  OR: [UsersOnProductsSubscriptionWhereInput!]
  NOT: [UsersOnProductsSubscriptionWhereInput!]
}

input UsersOnProductsUpdateInput {
  user: UserUpdateOneRequiredWithoutProductsInput
  product: ProductUpdateOneRequiredInput
  localisation: String
  nombre: Int
  phone: String
  ordered: Boolean
}

input UsersOnProductsUpdateManyDataInput {
  localisation: String
  nombre: Int
  phone: String
  ordered: Boolean
}

input UsersOnProductsUpdateManyMutationInput {
  localisation: String
  nombre: Int
  phone: String
  ordered: Boolean
}

input UsersOnProductsUpdateManyWithoutUserInput {
  create: [UsersOnProductsCreateWithoutUserInput!]
  delete: [UsersOnProductsWhereUniqueInput!]
  connect: [UsersOnProductsWhereUniqueInput!]
  set: [UsersOnProductsWhereUniqueInput!]
  disconnect: [UsersOnProductsWhereUniqueInput!]
  update: [UsersOnProductsUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UsersOnProductsUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UsersOnProductsScalarWhereInput!]
  updateMany: [UsersOnProductsUpdateManyWithWhereNestedInput!]
}

input UsersOnProductsUpdateManyWithWhereNestedInput {
  where: UsersOnProductsScalarWhereInput!
  data: UsersOnProductsUpdateManyDataInput!
}

input UsersOnProductsUpdateWithoutUserDataInput {
  product: ProductUpdateOneRequiredInput
  localisation: String
  nombre: Int
  phone: String
  ordered: Boolean
}

input UsersOnProductsUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnProductsWhereUniqueInput!
  data: UsersOnProductsUpdateWithoutUserDataInput!
}

input UsersOnProductsUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnProductsWhereUniqueInput!
  update: UsersOnProductsUpdateWithoutUserDataInput!
  create: UsersOnProductsCreateWithoutUserInput!
}

input UsersOnProductsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  product: ProductWhereInput
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  nombre: Int
  nombre_not: Int
  nombre_in: [Int!]
  nombre_not_in: [Int!]
  nombre_lt: Int
  nombre_lte: Int
  nombre_gt: Int
  nombre_gte: Int
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  ordered: Boolean
  ordered_not: Boolean
  AND: [UsersOnProductsWhereInput!]
  OR: [UsersOnProductsWhereInput!]
  NOT: [UsersOnProductsWhereInput!]
}

input UsersOnProductsWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  phone: String
  email: String
  password: String
  role: String
  plates: UsersOnPlatesUpdateManyWithoutUserInput
  houses: UsersOnHousesUpdateManyWithoutUserInput
  products: UsersOnProductsUpdateManyWithoutUserInput
  steeds: SteedUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  phone: String
  email: String
  password: String
  role: String
}

input UserUpdateOneRequiredWithoutHousesInput {
  create: UserCreateWithoutHousesInput
  update: UserUpdateWithoutHousesDataInput
  upsert: UserUpsertWithoutHousesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPlatesInput {
  create: UserCreateWithoutPlatesInput
  update: UserUpdateWithoutPlatesDataInput
  upsert: UserUpsertWithoutPlatesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProductsInput {
  create: UserCreateWithoutProductsInput
  update: UserUpdateWithoutProductsDataInput
  upsert: UserUpsertWithoutProductsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSteedsInput {
  create: UserCreateWithoutSteedsInput
  update: UserUpdateWithoutSteedsDataInput
  upsert: UserUpsertWithoutSteedsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutHousesDataInput {
  name: String
  phone: String
  email: String
  password: String
  role: String
  plates: UsersOnPlatesUpdateManyWithoutUserInput
  products: UsersOnProductsUpdateManyWithoutUserInput
  steeds: SteedUpdateManyWithoutUserInput
}

input UserUpdateWithoutPlatesDataInput {
  name: String
  phone: String
  email: String
  password: String
  role: String
  houses: UsersOnHousesUpdateManyWithoutUserInput
  products: UsersOnProductsUpdateManyWithoutUserInput
  steeds: SteedUpdateManyWithoutUserInput
}

input UserUpdateWithoutProductsDataInput {
  name: String
  phone: String
  email: String
  password: String
  role: String
  plates: UsersOnPlatesUpdateManyWithoutUserInput
  houses: UsersOnHousesUpdateManyWithoutUserInput
  steeds: SteedUpdateManyWithoutUserInput
}

input UserUpdateWithoutSteedsDataInput {
  name: String
  phone: String
  email: String
  password: String
  role: String
  plates: UsersOnPlatesUpdateManyWithoutUserInput
  houses: UsersOnHousesUpdateManyWithoutUserInput
  products: UsersOnProductsUpdateManyWithoutUserInput
}

input UserUpsertWithoutHousesInput {
  update: UserUpdateWithoutHousesDataInput!
  create: UserCreateWithoutHousesInput!
}

input UserUpsertWithoutPlatesInput {
  update: UserUpdateWithoutPlatesDataInput!
  create: UserCreateWithoutPlatesInput!
}

input UserUpsertWithoutProductsInput {
  update: UserUpdateWithoutProductsDataInput!
  create: UserCreateWithoutProductsInput!
}

input UserUpsertWithoutSteedsInput {
  update: UserUpdateWithoutSteedsDataInput!
  create: UserCreateWithoutSteedsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  plates_every: UsersOnPlatesWhereInput
  plates_some: UsersOnPlatesWhereInput
  plates_none: UsersOnPlatesWhereInput
  houses_every: UsersOnHousesWhereInput
  houses_some: UsersOnHousesWhereInput
  houses_none: UsersOnHousesWhereInput
  products_every: UsersOnProductsWhereInput
  products_some: UsersOnProductsWhereInput
  products_none: UsersOnProductsWhereInput
  steeds_every: SteedWhereInput
  steeds_some: SteedWhereInput
  steeds_none: SteedWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  phone: String
}
`
      }
    