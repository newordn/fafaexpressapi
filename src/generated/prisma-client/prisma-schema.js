module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHouse {
  count: Int!
}

type AggregatePlat {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateSteed {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUsersOnPlates {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type House {
  id: ID!
  illustration: String!
  description: String
  localisation: String!
  price: Float!
  date: DateTime
}

type HouseConnection {
  pageInfo: PageInfo!
  edges: [HouseEdge]!
  aggregate: AggregateHouse!
}

input HouseCreateInput {
  id: ID
  illustration: String!
  description: String
  localisation: String!
  price: Float!
}

type HouseEdge {
  node: House!
  cursor: String!
}

enum HouseOrderByInput {
  id_ASC
  id_DESC
  illustration_ASC
  illustration_DESC
  description_ASC
  description_DESC
  localisation_ASC
  localisation_DESC
  price_ASC
  price_DESC
  date_ASC
  date_DESC
}

type HousePreviousValues {
  id: ID!
  illustration: String!
  description: String
  localisation: String!
  price: Float!
  date: DateTime
}

type HouseSubscriptionPayload {
  mutation: MutationType!
  node: House
  updatedFields: [String!]
  previousValues: HousePreviousValues
}

input HouseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HouseWhereInput
  AND: [HouseSubscriptionWhereInput!]
  OR: [HouseSubscriptionWhereInput!]
  NOT: [HouseSubscriptionWhereInput!]
}

input HouseUpdateInput {
  illustration: String
  description: String
  localisation: String
  price: Float
}

input HouseUpdateManyMutationInput {
  illustration: String
  description: String
  localisation: String
  price: Float
}

input HouseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [HouseWhereInput!]
  OR: [HouseWhereInput!]
  NOT: [HouseWhereInput!]
}

input HouseWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createHouse(data: HouseCreateInput!): House!
  updateHouse(data: HouseUpdateInput!, where: HouseWhereUniqueInput!): House
  updateManyHouses(data: HouseUpdateManyMutationInput!, where: HouseWhereInput): BatchPayload!
  upsertHouse(where: HouseWhereUniqueInput!, create: HouseCreateInput!, update: HouseUpdateInput!): House!
  deleteHouse(where: HouseWhereUniqueInput!): House
  deleteManyHouses(where: HouseWhereInput): BatchPayload!
  createPlat(data: PlatCreateInput!): Plat!
  updatePlat(data: PlatUpdateInput!, where: PlatWhereUniqueInput!): Plat
  updateManyPlats(data: PlatUpdateManyMutationInput!, where: PlatWhereInput): BatchPayload!
  upsertPlat(where: PlatWhereUniqueInput!, create: PlatCreateInput!, update: PlatUpdateInput!): Plat!
  deletePlat(where: PlatWhereUniqueInput!): Plat
  deleteManyPlats(where: PlatWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createSteed(data: SteedCreateInput!): Steed!
  updateSteed(data: SteedUpdateInput!, where: SteedWhereUniqueInput!): Steed
  updateManySteeds(data: SteedUpdateManyMutationInput!, where: SteedWhereInput): BatchPayload!
  upsertSteed(where: SteedWhereUniqueInput!, create: SteedCreateInput!, update: SteedUpdateInput!): Steed!
  deleteSteed(where: SteedWhereUniqueInput!): Steed
  deleteManySteeds(where: SteedWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUsersOnPlates(data: UsersOnPlatesCreateInput!): UsersOnPlates!
  updateUsersOnPlates(data: UsersOnPlatesUpdateInput!, where: UsersOnPlatesWhereUniqueInput!): UsersOnPlates
  updateManyUsersOnPlateses(data: UsersOnPlatesUpdateManyMutationInput!, where: UsersOnPlatesWhereInput): BatchPayload!
  upsertUsersOnPlates(where: UsersOnPlatesWhereUniqueInput!, create: UsersOnPlatesCreateInput!, update: UsersOnPlatesUpdateInput!): UsersOnPlates!
  deleteUsersOnPlates(where: UsersOnPlatesWhereUniqueInput!): UsersOnPlates
  deleteManyUsersOnPlateses(where: UsersOnPlatesWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Plat {
  id: ID!
  name: String!
  illustration: String!
  description: String!
  price: Float!
  date: DateTime
  users(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnPlates!]
}

type PlatConnection {
  pageInfo: PageInfo!
  edges: [PlatEdge]!
  aggregate: AggregatePlat!
}

input PlatCreateInput {
  id: ID
  name: String!
  illustration: String!
  description: String!
  price: Float!
  users: UsersOnPlatesCreateManyWithoutPlatInput
}

input PlatCreateOneWithoutUsersInput {
  create: PlatCreateWithoutUsersInput
  connect: PlatWhereUniqueInput
}

input PlatCreateWithoutUsersInput {
  id: ID
  name: String!
  illustration: String!
  description: String!
  price: Float!
}

type PlatEdge {
  node: Plat!
  cursor: String!
}

enum PlatOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  illustration_ASC
  illustration_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  date_ASC
  date_DESC
}

type PlatPreviousValues {
  id: ID!
  name: String!
  illustration: String!
  description: String!
  price: Float!
  date: DateTime
}

type PlatSubscriptionPayload {
  mutation: MutationType!
  node: Plat
  updatedFields: [String!]
  previousValues: PlatPreviousValues
}

input PlatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlatWhereInput
  AND: [PlatSubscriptionWhereInput!]
  OR: [PlatSubscriptionWhereInput!]
  NOT: [PlatSubscriptionWhereInput!]
}

input PlatUpdateInput {
  name: String
  illustration: String
  description: String
  price: Float
  users: UsersOnPlatesUpdateManyWithoutPlatInput
}

input PlatUpdateManyMutationInput {
  name: String
  illustration: String
  description: String
  price: Float
}

input PlatUpdateOneRequiredWithoutUsersInput {
  create: PlatCreateWithoutUsersInput
  update: PlatUpdateWithoutUsersDataInput
  upsert: PlatUpsertWithoutUsersInput
  connect: PlatWhereUniqueInput
}

input PlatUpdateWithoutUsersDataInput {
  name: String
  illustration: String
  description: String
  price: Float
}

input PlatUpsertWithoutUsersInput {
  update: PlatUpdateWithoutUsersDataInput!
  create: PlatCreateWithoutUsersInput!
}

input PlatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  users_every: UsersOnPlatesWhereInput
  users_some: UsersOnPlatesWhereInput
  users_none: UsersOnPlatesWhereInput
  AND: [PlatWhereInput!]
  OR: [PlatWhereInput!]
  NOT: [PlatWhereInput!]
}

input PlatWhereUniqueInput {
  id: ID
}

type Product {
  id: ID!
  name: String!
  description: String!
  illustration: String!
  price: Float!
  date: DateTime
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  name: String!
  description: String!
  illustration: String!
  price: Float!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  illustration_ASC
  illustration_DESC
  price_ASC
  price_DESC
  date_ASC
  date_DESC
}

type ProductPreviousValues {
  id: ID!
  name: String!
  description: String!
  illustration: String!
  price: Float!
  date: DateTime
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  name: String
  description: String
  illustration: String
  price: Float
}

input ProductUpdateManyMutationInput {
  name: String
  description: String
  illustration: String
  price: Float
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  house(where: HouseWhereUniqueInput!): House
  houses(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [House]!
  housesConnection(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HouseConnection!
  plat(where: PlatWhereUniqueInput!): Plat
  plats(where: PlatWhereInput, orderBy: PlatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plat]!
  platsConnection(where: PlatWhereInput, orderBy: PlatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlatConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  steed(where: SteedWhereUniqueInput!): Steed
  steeds(where: SteedWhereInput, orderBy: SteedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Steed]!
  steedsConnection(where: SteedWhereInput, orderBy: SteedOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SteedConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  usersOnPlates(where: UsersOnPlatesWhereUniqueInput!): UsersOnPlates
  usersOnPlateses(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnPlates]!
  usersOnPlatesesConnection(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersOnPlatesConnection!
  node(id: ID!): Node
}

type Steed {
  id: ID!
  pointA: String!
  pointB: String!
  description: String!
  date: DateTime
}

type SteedConnection {
  pageInfo: PageInfo!
  edges: [SteedEdge]!
  aggregate: AggregateSteed!
}

input SteedCreateInput {
  id: ID
  pointA: String!
  pointB: String!
  description: String!
}

type SteedEdge {
  node: Steed!
  cursor: String!
}

enum SteedOrderByInput {
  id_ASC
  id_DESC
  pointA_ASC
  pointA_DESC
  pointB_ASC
  pointB_DESC
  description_ASC
  description_DESC
  date_ASC
  date_DESC
}

type SteedPreviousValues {
  id: ID!
  pointA: String!
  pointB: String!
  description: String!
  date: DateTime
}

type SteedSubscriptionPayload {
  mutation: MutationType!
  node: Steed
  updatedFields: [String!]
  previousValues: SteedPreviousValues
}

input SteedSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SteedWhereInput
  AND: [SteedSubscriptionWhereInput!]
  OR: [SteedSubscriptionWhereInput!]
  NOT: [SteedSubscriptionWhereInput!]
}

input SteedUpdateInput {
  pointA: String
  pointB: String
  description: String
}

input SteedUpdateManyMutationInput {
  pointA: String
  pointB: String
  description: String
}

input SteedWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  pointA: String
  pointA_not: String
  pointA_in: [String!]
  pointA_not_in: [String!]
  pointA_lt: String
  pointA_lte: String
  pointA_gt: String
  pointA_gte: String
  pointA_contains: String
  pointA_not_contains: String
  pointA_starts_with: String
  pointA_not_starts_with: String
  pointA_ends_with: String
  pointA_not_ends_with: String
  pointB: String
  pointB_not: String
  pointB_in: [String!]
  pointB_not_in: [String!]
  pointB_lt: String
  pointB_lte: String
  pointB_gt: String
  pointB_gte: String
  pointB_contains: String
  pointB_not_contains: String
  pointB_starts_with: String
  pointB_not_starts_with: String
  pointB_ends_with: String
  pointB_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [SteedWhereInput!]
  OR: [SteedWhereInput!]
  NOT: [SteedWhereInput!]
}

input SteedWhereUniqueInput {
  id: ID
}

type Subscription {
  house(where: HouseSubscriptionWhereInput): HouseSubscriptionPayload
  plat(where: PlatSubscriptionWhereInput): PlatSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  steed(where: SteedSubscriptionWhereInput): SteedSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  usersOnPlates(where: UsersOnPlatesSubscriptionWhereInput): UsersOnPlatesSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  phone: String!
  email: String!
  illustration: String!
  password: String!
  role: String!
  date: DateTime
  plates(where: UsersOnPlatesWhereInput, orderBy: UsersOnPlatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersOnPlates!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  phone: String!
  email: String!
  illustration: String!
  password: String!
  role: String!
  plates: UsersOnPlatesCreateManyWithoutUserInput
}

input UserCreateOneWithoutPlatesInput {
  create: UserCreateWithoutPlatesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlatesInput {
  id: ID
  name: String!
  phone: String!
  email: String!
  illustration: String!
  password: String!
  role: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  illustration_ASC
  illustration_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  date_ASC
  date_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  phone: String!
  email: String!
  illustration: String!
  password: String!
  role: String!
  date: DateTime
}

type UsersOnPlates {
  id: ID!
  user: User!
  userId: Int!
  plat: Plat!
  platId: Int
  localisation: String!
  active: Boolean!
  date: DateTime
}

type UsersOnPlatesConnection {
  pageInfo: PageInfo!
  edges: [UsersOnPlatesEdge]!
  aggregate: AggregateUsersOnPlates!
}

input UsersOnPlatesCreateInput {
  id: ID
  user: UserCreateOneWithoutPlatesInput!
  userId: Int!
  plat: PlatCreateOneWithoutUsersInput!
  platId: Int
  localisation: String!
  active: Boolean!
}

input UsersOnPlatesCreateManyWithoutPlatInput {
  create: [UsersOnPlatesCreateWithoutPlatInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
}

input UsersOnPlatesCreateManyWithoutUserInput {
  create: [UsersOnPlatesCreateWithoutUserInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
}

input UsersOnPlatesCreateWithoutPlatInput {
  id: ID
  user: UserCreateOneWithoutPlatesInput!
  userId: Int!
  platId: Int
  localisation: String!
  active: Boolean!
}

input UsersOnPlatesCreateWithoutUserInput {
  id: ID
  userId: Int!
  plat: PlatCreateOneWithoutUsersInput!
  platId: Int
  localisation: String!
  active: Boolean!
}

type UsersOnPlatesEdge {
  node: UsersOnPlates!
  cursor: String!
}

enum UsersOnPlatesOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  platId_ASC
  platId_DESC
  localisation_ASC
  localisation_DESC
  active_ASC
  active_DESC
  date_ASC
  date_DESC
}

type UsersOnPlatesPreviousValues {
  id: ID!
  userId: Int!
  platId: Int
  localisation: String!
  active: Boolean!
  date: DateTime
}

input UsersOnPlatesScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: Int
  userId_not: Int
  userId_in: [Int!]
  userId_not_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  userId_gt: Int
  userId_gte: Int
  platId: Int
  platId_not: Int
  platId_in: [Int!]
  platId_not_in: [Int!]
  platId_lt: Int
  platId_lte: Int
  platId_gt: Int
  platId_gte: Int
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  active: Boolean
  active_not: Boolean
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UsersOnPlatesScalarWhereInput!]
  OR: [UsersOnPlatesScalarWhereInput!]
  NOT: [UsersOnPlatesScalarWhereInput!]
}

type UsersOnPlatesSubscriptionPayload {
  mutation: MutationType!
  node: UsersOnPlates
  updatedFields: [String!]
  previousValues: UsersOnPlatesPreviousValues
}

input UsersOnPlatesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UsersOnPlatesWhereInput
  AND: [UsersOnPlatesSubscriptionWhereInput!]
  OR: [UsersOnPlatesSubscriptionWhereInput!]
  NOT: [UsersOnPlatesSubscriptionWhereInput!]
}

input UsersOnPlatesUpdateInput {
  user: UserUpdateOneRequiredWithoutPlatesInput
  userId: Int
  plat: PlatUpdateOneRequiredWithoutUsersInput
  platId: Int
  localisation: String
  active: Boolean
}

input UsersOnPlatesUpdateManyDataInput {
  userId: Int
  platId: Int
  localisation: String
  active: Boolean
}

input UsersOnPlatesUpdateManyMutationInput {
  userId: Int
  platId: Int
  localisation: String
  active: Boolean
}

input UsersOnPlatesUpdateManyWithoutPlatInput {
  create: [UsersOnPlatesCreateWithoutPlatInput!]
  delete: [UsersOnPlatesWhereUniqueInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
  set: [UsersOnPlatesWhereUniqueInput!]
  disconnect: [UsersOnPlatesWhereUniqueInput!]
  update: [UsersOnPlatesUpdateWithWhereUniqueWithoutPlatInput!]
  upsert: [UsersOnPlatesUpsertWithWhereUniqueWithoutPlatInput!]
  deleteMany: [UsersOnPlatesScalarWhereInput!]
  updateMany: [UsersOnPlatesUpdateManyWithWhereNestedInput!]
}

input UsersOnPlatesUpdateManyWithoutUserInput {
  create: [UsersOnPlatesCreateWithoutUserInput!]
  delete: [UsersOnPlatesWhereUniqueInput!]
  connect: [UsersOnPlatesWhereUniqueInput!]
  set: [UsersOnPlatesWhereUniqueInput!]
  disconnect: [UsersOnPlatesWhereUniqueInput!]
  update: [UsersOnPlatesUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UsersOnPlatesUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UsersOnPlatesScalarWhereInput!]
  updateMany: [UsersOnPlatesUpdateManyWithWhereNestedInput!]
}

input UsersOnPlatesUpdateManyWithWhereNestedInput {
  where: UsersOnPlatesScalarWhereInput!
  data: UsersOnPlatesUpdateManyDataInput!
}

input UsersOnPlatesUpdateWithoutPlatDataInput {
  user: UserUpdateOneRequiredWithoutPlatesInput
  userId: Int
  platId: Int
  localisation: String
  active: Boolean
}

input UsersOnPlatesUpdateWithoutUserDataInput {
  userId: Int
  plat: PlatUpdateOneRequiredWithoutUsersInput
  platId: Int
  localisation: String
  active: Boolean
}

input UsersOnPlatesUpdateWithWhereUniqueWithoutPlatInput {
  where: UsersOnPlatesWhereUniqueInput!
  data: UsersOnPlatesUpdateWithoutPlatDataInput!
}

input UsersOnPlatesUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnPlatesWhereUniqueInput!
  data: UsersOnPlatesUpdateWithoutUserDataInput!
}

input UsersOnPlatesUpsertWithWhereUniqueWithoutPlatInput {
  where: UsersOnPlatesWhereUniqueInput!
  update: UsersOnPlatesUpdateWithoutPlatDataInput!
  create: UsersOnPlatesCreateWithoutPlatInput!
}

input UsersOnPlatesUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnPlatesWhereUniqueInput!
  update: UsersOnPlatesUpdateWithoutUserDataInput!
  create: UsersOnPlatesCreateWithoutUserInput!
}

input UsersOnPlatesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  userId: Int
  userId_not: Int
  userId_in: [Int!]
  userId_not_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  userId_gt: Int
  userId_gte: Int
  plat: PlatWhereInput
  platId: Int
  platId_not: Int
  platId_in: [Int!]
  platId_not_in: [Int!]
  platId_lt: Int
  platId_lte: Int
  platId_gt: Int
  platId_gte: Int
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  active: Boolean
  active_not: Boolean
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UsersOnPlatesWhereInput!]
  OR: [UsersOnPlatesWhereInput!]
  NOT: [UsersOnPlatesWhereInput!]
}

input UsersOnPlatesWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  phone: String
  email: String
  illustration: String
  password: String
  role: String
  plates: UsersOnPlatesUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  phone: String
  email: String
  illustration: String
  password: String
  role: String
}

input UserUpdateOneRequiredWithoutPlatesInput {
  create: UserCreateWithoutPlatesInput
  update: UserUpdateWithoutPlatesDataInput
  upsert: UserUpsertWithoutPlatesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPlatesDataInput {
  name: String
  phone: String
  email: String
  illustration: String
  password: String
  role: String
}

input UserUpsertWithoutPlatesInput {
  update: UserUpdateWithoutPlatesDataInput!
  create: UserCreateWithoutPlatesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  plates_every: UsersOnPlatesWhereInput
  plates_some: UsersOnPlatesWhereInput
  plates_none: UsersOnPlatesWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  phone: String
  email: String
}
`
      }
    