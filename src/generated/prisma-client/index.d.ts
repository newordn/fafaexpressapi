// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  house: (where?: HouseWhereInput) => Promise<boolean>;
  plat: (where?: PlatWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  steed: (where?: SteedWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  usersOnHouses: (where?: UsersOnHousesWhereInput) => Promise<boolean>;
  usersOnPlates: (where?: UsersOnPlatesWhereInput) => Promise<boolean>;
  usersOnProducts: (where?: UsersOnProductsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  house: (where: HouseWhereUniqueInput) => HouseNullablePromise;
  houses: (args?: {
    where?: HouseWhereInput;
    orderBy?: HouseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<House>;
  housesConnection: (args?: {
    where?: HouseWhereInput;
    orderBy?: HouseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HouseConnectionPromise;
  plat: (where: PlatWhereUniqueInput) => PlatNullablePromise;
  plats: (args?: {
    where?: PlatWhereInput;
    orderBy?: PlatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Plat>;
  platsConnection: (args?: {
    where?: PlatWhereInput;
    orderBy?: PlatOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlatConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  steed: (where: SteedWhereUniqueInput) => SteedNullablePromise;
  steeds: (args?: {
    where?: SteedWhereInput;
    orderBy?: SteedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Steed>;
  steedsConnection: (args?: {
    where?: SteedWhereInput;
    orderBy?: SteedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SteedConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  usersOnHouses: (
    where: UsersOnHousesWhereUniqueInput
  ) => UsersOnHousesNullablePromise;
  usersOnHouseses: (args?: {
    where?: UsersOnHousesWhereInput;
    orderBy?: UsersOnHousesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UsersOnHouses>;
  usersOnHousesesConnection: (args?: {
    where?: UsersOnHousesWhereInput;
    orderBy?: UsersOnHousesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UsersOnHousesConnectionPromise;
  usersOnPlates: (
    where: UsersOnPlatesWhereUniqueInput
  ) => UsersOnPlatesNullablePromise;
  usersOnPlateses: (args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UsersOnPlates>;
  usersOnPlatesesConnection: (args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UsersOnPlatesConnectionPromise;
  usersOnProducts: (
    where: UsersOnProductsWhereUniqueInput
  ) => UsersOnProductsNullablePromise;
  usersOnProductses: (args?: {
    where?: UsersOnProductsWhereInput;
    orderBy?: UsersOnProductsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UsersOnProducts>;
  usersOnProductsesConnection: (args?: {
    where?: UsersOnProductsWhereInput;
    orderBy?: UsersOnProductsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UsersOnProductsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createHouse: (data: HouseCreateInput) => HousePromise;
  updateHouse: (args: {
    data: HouseUpdateInput;
    where: HouseWhereUniqueInput;
  }) => HousePromise;
  updateManyHouses: (args: {
    data: HouseUpdateManyMutationInput;
    where?: HouseWhereInput;
  }) => BatchPayloadPromise;
  upsertHouse: (args: {
    where: HouseWhereUniqueInput;
    create: HouseCreateInput;
    update: HouseUpdateInput;
  }) => HousePromise;
  deleteHouse: (where: HouseWhereUniqueInput) => HousePromise;
  deleteManyHouses: (where?: HouseWhereInput) => BatchPayloadPromise;
  createPlat: (data: PlatCreateInput) => PlatPromise;
  updatePlat: (args: {
    data: PlatUpdateInput;
    where: PlatWhereUniqueInput;
  }) => PlatPromise;
  updateManyPlats: (args: {
    data: PlatUpdateManyMutationInput;
    where?: PlatWhereInput;
  }) => BatchPayloadPromise;
  upsertPlat: (args: {
    where: PlatWhereUniqueInput;
    create: PlatCreateInput;
    update: PlatUpdateInput;
  }) => PlatPromise;
  deletePlat: (where: PlatWhereUniqueInput) => PlatPromise;
  deleteManyPlats: (where?: PlatWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createSteed: (data: SteedCreateInput) => SteedPromise;
  updateSteed: (args: {
    data: SteedUpdateInput;
    where: SteedWhereUniqueInput;
  }) => SteedPromise;
  updateManySteeds: (args: {
    data: SteedUpdateManyMutationInput;
    where?: SteedWhereInput;
  }) => BatchPayloadPromise;
  upsertSteed: (args: {
    where: SteedWhereUniqueInput;
    create: SteedCreateInput;
    update: SteedUpdateInput;
  }) => SteedPromise;
  deleteSteed: (where: SteedWhereUniqueInput) => SteedPromise;
  deleteManySteeds: (where?: SteedWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUsersOnHouses: (data: UsersOnHousesCreateInput) => UsersOnHousesPromise;
  updateUsersOnHouses: (args: {
    data: UsersOnHousesUpdateInput;
    where: UsersOnHousesWhereUniqueInput;
  }) => UsersOnHousesPromise;
  updateManyUsersOnHouseses: (args: {
    data: UsersOnHousesUpdateManyMutationInput;
    where?: UsersOnHousesWhereInput;
  }) => BatchPayloadPromise;
  upsertUsersOnHouses: (args: {
    where: UsersOnHousesWhereUniqueInput;
    create: UsersOnHousesCreateInput;
    update: UsersOnHousesUpdateInput;
  }) => UsersOnHousesPromise;
  deleteUsersOnHouses: (
    where: UsersOnHousesWhereUniqueInput
  ) => UsersOnHousesPromise;
  deleteManyUsersOnHouseses: (
    where?: UsersOnHousesWhereInput
  ) => BatchPayloadPromise;
  createUsersOnPlates: (data: UsersOnPlatesCreateInput) => UsersOnPlatesPromise;
  updateUsersOnPlates: (args: {
    data: UsersOnPlatesUpdateInput;
    where: UsersOnPlatesWhereUniqueInput;
  }) => UsersOnPlatesPromise;
  updateManyUsersOnPlateses: (args: {
    data: UsersOnPlatesUpdateManyMutationInput;
    where?: UsersOnPlatesWhereInput;
  }) => BatchPayloadPromise;
  upsertUsersOnPlates: (args: {
    where: UsersOnPlatesWhereUniqueInput;
    create: UsersOnPlatesCreateInput;
    update: UsersOnPlatesUpdateInput;
  }) => UsersOnPlatesPromise;
  deleteUsersOnPlates: (
    where: UsersOnPlatesWhereUniqueInput
  ) => UsersOnPlatesPromise;
  deleteManyUsersOnPlateses: (
    where?: UsersOnPlatesWhereInput
  ) => BatchPayloadPromise;
  createUsersOnProducts: (
    data: UsersOnProductsCreateInput
  ) => UsersOnProductsPromise;
  updateUsersOnProducts: (args: {
    data: UsersOnProductsUpdateInput;
    where: UsersOnProductsWhereUniqueInput;
  }) => UsersOnProductsPromise;
  updateManyUsersOnProductses: (args: {
    data: UsersOnProductsUpdateManyMutationInput;
    where?: UsersOnProductsWhereInput;
  }) => BatchPayloadPromise;
  upsertUsersOnProducts: (args: {
    where: UsersOnProductsWhereUniqueInput;
    create: UsersOnProductsCreateInput;
    update: UsersOnProductsUpdateInput;
  }) => UsersOnProductsPromise;
  deleteUsersOnProducts: (
    where: UsersOnProductsWhereUniqueInput
  ) => UsersOnProductsPromise;
  deleteManyUsersOnProductses: (
    where?: UsersOnProductsWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  house: (
    where?: HouseSubscriptionWhereInput
  ) => HouseSubscriptionPayloadSubscription;
  plat: (
    where?: PlatSubscriptionWhereInput
  ) => PlatSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  steed: (
    where?: SteedSubscriptionWhereInput
  ) => SteedSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  usersOnHouses: (
    where?: UsersOnHousesSubscriptionWhereInput
  ) => UsersOnHousesSubscriptionPayloadSubscription;
  usersOnPlates: (
    where?: UsersOnPlatesSubscriptionWhereInput
  ) => UsersOnPlatesSubscriptionPayloadSubscription;
  usersOnProducts: (
    where?: UsersOnProductsSubscriptionWhereInput
  ) => UsersOnProductsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type HouseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "illustration_ASC"
  | "illustration_DESC"
  | "description_ASC"
  | "description_DESC"
  | "localisation_ASC"
  | "localisation_DESC"
  | "price_ASC"
  | "price_DESC"
  | "date_ASC"
  | "date_DESC";

export type UsersOnPlatesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "localisation_ASC"
  | "localisation_DESC"
  | "ordered_ASC"
  | "ordered_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "date_ASC"
  | "date_DESC";

export type UsersOnHousesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ordered_ASC"
  | "ordered_DESC"
  | "localisation_ASC"
  | "localisation_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "date_ASC"
  | "date_DESC";

export type UsersOnProductsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "localisation_ASC"
  | "localisation_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "date_ASC"
  | "date_DESC"
  | "ordered_ASC"
  | "ordered_DESC";

export type SteedOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "pointA_ASC"
  | "pointA_DESC"
  | "pointB_ASC"
  | "pointB_DESC"
  | "description_ASC"
  | "description_DESC"
  | "date_ASC"
  | "date_DESC"
  | "ordered_ASC"
  | "ordered_DESC"
  | "phone_ASC"
  | "phone_DESC";

export type PlatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "illustration_ASC"
  | "illustration_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "date_ASC"
  | "date_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "illustration_ASC"
  | "illustration_DESC"
  | "price_ASC"
  | "price_DESC"
  | "date_ASC"
  | "date_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "date_ASC"
  | "date_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type HouseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HouseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  illustration?: Maybe<String>;
  illustration_not?: Maybe<String>;
  illustration_in?: Maybe<String[] | String>;
  illustration_not_in?: Maybe<String[] | String>;
  illustration_lt?: Maybe<String>;
  illustration_lte?: Maybe<String>;
  illustration_gt?: Maybe<String>;
  illustration_gte?: Maybe<String>;
  illustration_contains?: Maybe<String>;
  illustration_not_contains?: Maybe<String>;
  illustration_starts_with?: Maybe<String>;
  illustration_not_starts_with?: Maybe<String>;
  illustration_ends_with?: Maybe<String>;
  illustration_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HouseWhereInput[] | HouseWhereInput>;
  OR?: Maybe<HouseWhereInput[] | HouseWhereInput>;
  NOT?: Maybe<HouseWhereInput[] | HouseWhereInput>;
}

export type PlatWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UsersOnPlatesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  plat?: Maybe<PlatWhereInput>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  nombre?: Maybe<Int>;
  nombre_not?: Maybe<Int>;
  nombre_in?: Maybe<Int[] | Int>;
  nombre_not_in?: Maybe<Int[] | Int>;
  nombre_lt?: Maybe<Int>;
  nombre_lte?: Maybe<Int>;
  nombre_gt?: Maybe<Int>;
  nombre_gte?: Maybe<Int>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UsersOnPlatesWhereInput[] | UsersOnPlatesWhereInput>;
  OR?: Maybe<UsersOnPlatesWhereInput[] | UsersOnPlatesWhereInput>;
  NOT?: Maybe<UsersOnPlatesWhereInput[] | UsersOnPlatesWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<String>;
  role_not?: Maybe<String>;
  role_in?: Maybe<String[] | String>;
  role_not_in?: Maybe<String[] | String>;
  role_lt?: Maybe<String>;
  role_lte?: Maybe<String>;
  role_gt?: Maybe<String>;
  role_gte?: Maybe<String>;
  role_contains?: Maybe<String>;
  role_not_contains?: Maybe<String>;
  role_starts_with?: Maybe<String>;
  role_not_starts_with?: Maybe<String>;
  role_ends_with?: Maybe<String>;
  role_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  plates_every?: Maybe<UsersOnPlatesWhereInput>;
  plates_some?: Maybe<UsersOnPlatesWhereInput>;
  plates_none?: Maybe<UsersOnPlatesWhereInput>;
  houses_every?: Maybe<UsersOnHousesWhereInput>;
  houses_some?: Maybe<UsersOnHousesWhereInput>;
  houses_none?: Maybe<UsersOnHousesWhereInput>;
  products_every?: Maybe<UsersOnProductsWhereInput>;
  products_some?: Maybe<UsersOnProductsWhereInput>;
  products_none?: Maybe<UsersOnProductsWhereInput>;
  steeds_every?: Maybe<SteedWhereInput>;
  steeds_some?: Maybe<SteedWhereInput>;
  steeds_none?: Maybe<SteedWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UsersOnHousesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  house?: Maybe<HouseWhereInput>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  nombre?: Maybe<Int>;
  nombre_not?: Maybe<Int>;
  nombre_in?: Maybe<Int[] | Int>;
  nombre_not_in?: Maybe<Int[] | Int>;
  nombre_lt?: Maybe<Int>;
  nombre_lte?: Maybe<Int>;
  nombre_gt?: Maybe<Int>;
  nombre_gte?: Maybe<Int>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UsersOnHousesWhereInput[] | UsersOnHousesWhereInput>;
  OR?: Maybe<UsersOnHousesWhereInput[] | UsersOnHousesWhereInput>;
  NOT?: Maybe<UsersOnHousesWhereInput[] | UsersOnHousesWhereInput>;
}

export interface UsersOnProductsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  product?: Maybe<ProductWhereInput>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  nombre?: Maybe<Int>;
  nombre_not?: Maybe<Int>;
  nombre_in?: Maybe<Int[] | Int>;
  nombre_not_in?: Maybe<Int[] | Int>;
  nombre_lt?: Maybe<Int>;
  nombre_lte?: Maybe<Int>;
  nombre_gt?: Maybe<Int>;
  nombre_gte?: Maybe<Int>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  AND?: Maybe<UsersOnProductsWhereInput[] | UsersOnProductsWhereInput>;
  OR?: Maybe<UsersOnProductsWhereInput[] | UsersOnProductsWhereInput>;
  NOT?: Maybe<UsersOnProductsWhereInput[] | UsersOnProductsWhereInput>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  illustration?: Maybe<String>;
  illustration_not?: Maybe<String>;
  illustration_in?: Maybe<String[] | String>;
  illustration_not_in?: Maybe<String[] | String>;
  illustration_lt?: Maybe<String>;
  illustration_lte?: Maybe<String>;
  illustration_gt?: Maybe<String>;
  illustration_gte?: Maybe<String>;
  illustration_contains?: Maybe<String>;
  illustration_not_contains?: Maybe<String>;
  illustration_starts_with?: Maybe<String>;
  illustration_not_starts_with?: Maybe<String>;
  illustration_ends_with?: Maybe<String>;
  illustration_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface SteedWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  pointA?: Maybe<String>;
  pointA_not?: Maybe<String>;
  pointA_in?: Maybe<String[] | String>;
  pointA_not_in?: Maybe<String[] | String>;
  pointA_lt?: Maybe<String>;
  pointA_lte?: Maybe<String>;
  pointA_gt?: Maybe<String>;
  pointA_gte?: Maybe<String>;
  pointA_contains?: Maybe<String>;
  pointA_not_contains?: Maybe<String>;
  pointA_starts_with?: Maybe<String>;
  pointA_not_starts_with?: Maybe<String>;
  pointA_ends_with?: Maybe<String>;
  pointA_not_ends_with?: Maybe<String>;
  pointB?: Maybe<String>;
  pointB_not?: Maybe<String>;
  pointB_in?: Maybe<String[] | String>;
  pointB_not_in?: Maybe<String[] | String>;
  pointB_lt?: Maybe<String>;
  pointB_lte?: Maybe<String>;
  pointB_gt?: Maybe<String>;
  pointB_gte?: Maybe<String>;
  pointB_contains?: Maybe<String>;
  pointB_not_contains?: Maybe<String>;
  pointB_starts_with?: Maybe<String>;
  pointB_not_starts_with?: Maybe<String>;
  pointB_ends_with?: Maybe<String>;
  pointB_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<SteedWhereInput[] | SteedWhereInput>;
  OR?: Maybe<SteedWhereInput[] | SteedWhereInput>;
  NOT?: Maybe<SteedWhereInput[] | SteedWhereInput>;
}

export interface PlatWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  illustration?: Maybe<String>;
  illustration_not?: Maybe<String>;
  illustration_in?: Maybe<String[] | String>;
  illustration_not_in?: Maybe<String[] | String>;
  illustration_lt?: Maybe<String>;
  illustration_lte?: Maybe<String>;
  illustration_gt?: Maybe<String>;
  illustration_gte?: Maybe<String>;
  illustration_contains?: Maybe<String>;
  illustration_not_contains?: Maybe<String>;
  illustration_starts_with?: Maybe<String>;
  illustration_not_starts_with?: Maybe<String>;
  illustration_ends_with?: Maybe<String>;
  illustration_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  users_every?: Maybe<UsersOnPlatesWhereInput>;
  users_some?: Maybe<UsersOnPlatesWhereInput>;
  users_none?: Maybe<UsersOnPlatesWhereInput>;
  AND?: Maybe<PlatWhereInput[] | PlatWhereInput>;
  OR?: Maybe<PlatWhereInput[] | PlatWhereInput>;
  NOT?: Maybe<PlatWhereInput[] | PlatWhereInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SteedWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  phone?: Maybe<String>;
}>;

export type UsersOnHousesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UsersOnPlatesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UsersOnProductsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HouseCreateInput {
  id?: Maybe<ID_Input>;
  illustration: String;
  description?: Maybe<String>;
  localisation: String;
  price: Float;
}

export interface HouseUpdateInput {
  illustration?: Maybe<String>;
  description?: Maybe<String>;
  localisation?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface HouseUpdateManyMutationInput {
  illustration?: Maybe<String>;
  description?: Maybe<String>;
  localisation?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface PlatCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  illustration: String;
  description: String;
  price: Float;
  users?: Maybe<UsersOnPlatesCreateManyWithoutPlatInput>;
}

export interface UsersOnPlatesCreateManyWithoutPlatInput {
  create?: Maybe<
    UsersOnPlatesCreateWithoutPlatInput[] | UsersOnPlatesCreateWithoutPlatInput
  >;
  connect?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
}

export interface UsersOnPlatesCreateWithoutPlatInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPlatesInput;
  localisation: String;
  ordered: Boolean;
  nombre: Int;
  phone: String;
}

export interface UserCreateOneWithoutPlatesInput {
  create?: Maybe<UserCreateWithoutPlatesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPlatesInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone: String;
  email?: Maybe<String>;
  password: String;
  role: String;
  houses?: Maybe<UsersOnHousesCreateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsCreateManyWithoutUserInput>;
  steeds?: Maybe<SteedCreateManyWithoutUserInput>;
}

export interface UsersOnHousesCreateManyWithoutUserInput {
  create?: Maybe<
    UsersOnHousesCreateWithoutUserInput[] | UsersOnHousesCreateWithoutUserInput
  >;
  connect?: Maybe<
    UsersOnHousesWhereUniqueInput[] | UsersOnHousesWhereUniqueInput
  >;
}

export interface UsersOnHousesCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  house: HouseCreateOneInput;
  ordered: Boolean;
  localisation: String;
  nombre: Int;
  phone: String;
}

export interface HouseCreateOneInput {
  create?: Maybe<HouseCreateInput>;
  connect?: Maybe<HouseWhereUniqueInput>;
}

export interface UsersOnProductsCreateManyWithoutUserInput {
  create?: Maybe<
    | UsersOnProductsCreateWithoutUserInput[]
    | UsersOnProductsCreateWithoutUserInput
  >;
  connect?: Maybe<
    UsersOnProductsWhereUniqueInput[] | UsersOnProductsWhereUniqueInput
  >;
}

export interface UsersOnProductsCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneInput;
  localisation: String;
  nombre: Int;
  phone: String;
  ordered: Boolean;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  illustration: String;
  price: Float;
}

export interface SteedCreateManyWithoutUserInput {
  create?: Maybe<SteedCreateWithoutUserInput[] | SteedCreateWithoutUserInput>;
  connect?: Maybe<SteedWhereUniqueInput[] | SteedWhereUniqueInput>;
}

export interface SteedCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  pointA: String;
  pointB: String;
  description: String;
  ordered: Boolean;
  phone: String;
}

export interface PlatUpdateInput {
  name?: Maybe<String>;
  illustration?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
  users?: Maybe<UsersOnPlatesUpdateManyWithoutPlatInput>;
}

export interface UsersOnPlatesUpdateManyWithoutPlatInput {
  create?: Maybe<
    UsersOnPlatesCreateWithoutPlatInput[] | UsersOnPlatesCreateWithoutPlatInput
  >;
  delete?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
  connect?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
  set?: Maybe<UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput>;
  disconnect?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
  update?: Maybe<
    | UsersOnPlatesUpdateWithWhereUniqueWithoutPlatInput[]
    | UsersOnPlatesUpdateWithWhereUniqueWithoutPlatInput
  >;
  upsert?: Maybe<
    | UsersOnPlatesUpsertWithWhereUniqueWithoutPlatInput[]
    | UsersOnPlatesUpsertWithWhereUniqueWithoutPlatInput
  >;
  deleteMany?: Maybe<
    UsersOnPlatesScalarWhereInput[] | UsersOnPlatesScalarWhereInput
  >;
  updateMany?: Maybe<
    | UsersOnPlatesUpdateManyWithWhereNestedInput[]
    | UsersOnPlatesUpdateManyWithWhereNestedInput
  >;
}

export interface UsersOnPlatesUpdateWithWhereUniqueWithoutPlatInput {
  where: UsersOnPlatesWhereUniqueInput;
  data: UsersOnPlatesUpdateWithoutPlatDataInput;
}

export interface UsersOnPlatesUpdateWithoutPlatDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPlatesInput>;
  localisation?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPlatesInput {
  create?: Maybe<UserCreateWithoutPlatesInput>;
  update?: Maybe<UserUpdateWithoutPlatesDataInput>;
  upsert?: Maybe<UserUpsertWithoutPlatesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPlatesDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  houses?: Maybe<UsersOnHousesUpdateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsUpdateManyWithoutUserInput>;
  steeds?: Maybe<SteedUpdateManyWithoutUserInput>;
}

export interface UsersOnHousesUpdateManyWithoutUserInput {
  create?: Maybe<
    UsersOnHousesCreateWithoutUserInput[] | UsersOnHousesCreateWithoutUserInput
  >;
  delete?: Maybe<
    UsersOnHousesWhereUniqueInput[] | UsersOnHousesWhereUniqueInput
  >;
  connect?: Maybe<
    UsersOnHousesWhereUniqueInput[] | UsersOnHousesWhereUniqueInput
  >;
  set?: Maybe<UsersOnHousesWhereUniqueInput[] | UsersOnHousesWhereUniqueInput>;
  disconnect?: Maybe<
    UsersOnHousesWhereUniqueInput[] | UsersOnHousesWhereUniqueInput
  >;
  update?: Maybe<
    | UsersOnHousesUpdateWithWhereUniqueWithoutUserInput[]
    | UsersOnHousesUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UsersOnHousesUpsertWithWhereUniqueWithoutUserInput[]
    | UsersOnHousesUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    UsersOnHousesScalarWhereInput[] | UsersOnHousesScalarWhereInput
  >;
  updateMany?: Maybe<
    | UsersOnHousesUpdateManyWithWhereNestedInput[]
    | UsersOnHousesUpdateManyWithWhereNestedInput
  >;
}

export interface UsersOnHousesUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnHousesWhereUniqueInput;
  data: UsersOnHousesUpdateWithoutUserDataInput;
}

export interface UsersOnHousesUpdateWithoutUserDataInput {
  house?: Maybe<HouseUpdateOneRequiredInput>;
  ordered?: Maybe<Boolean>;
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface HouseUpdateOneRequiredInput {
  create?: Maybe<HouseCreateInput>;
  update?: Maybe<HouseUpdateDataInput>;
  upsert?: Maybe<HouseUpsertNestedInput>;
  connect?: Maybe<HouseWhereUniqueInput>;
}

export interface HouseUpdateDataInput {
  illustration?: Maybe<String>;
  description?: Maybe<String>;
  localisation?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface HouseUpsertNestedInput {
  update: HouseUpdateDataInput;
  create: HouseCreateInput;
}

export interface UsersOnHousesUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnHousesWhereUniqueInput;
  update: UsersOnHousesUpdateWithoutUserDataInput;
  create: UsersOnHousesCreateWithoutUserInput;
}

export interface UsersOnHousesScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  nombre?: Maybe<Int>;
  nombre_not?: Maybe<Int>;
  nombre_in?: Maybe<Int[] | Int>;
  nombre_not_in?: Maybe<Int[] | Int>;
  nombre_lt?: Maybe<Int>;
  nombre_lte?: Maybe<Int>;
  nombre_gt?: Maybe<Int>;
  nombre_gte?: Maybe<Int>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UsersOnHousesScalarWhereInput[] | UsersOnHousesScalarWhereInput>;
  OR?: Maybe<UsersOnHousesScalarWhereInput[] | UsersOnHousesScalarWhereInput>;
  NOT?: Maybe<UsersOnHousesScalarWhereInput[] | UsersOnHousesScalarWhereInput>;
}

export interface UsersOnHousesUpdateManyWithWhereNestedInput {
  where: UsersOnHousesScalarWhereInput;
  data: UsersOnHousesUpdateManyDataInput;
}

export interface UsersOnHousesUpdateManyDataInput {
  ordered?: Maybe<Boolean>;
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface UsersOnProductsUpdateManyWithoutUserInput {
  create?: Maybe<
    | UsersOnProductsCreateWithoutUserInput[]
    | UsersOnProductsCreateWithoutUserInput
  >;
  delete?: Maybe<
    UsersOnProductsWhereUniqueInput[] | UsersOnProductsWhereUniqueInput
  >;
  connect?: Maybe<
    UsersOnProductsWhereUniqueInput[] | UsersOnProductsWhereUniqueInput
  >;
  set?: Maybe<
    UsersOnProductsWhereUniqueInput[] | UsersOnProductsWhereUniqueInput
  >;
  disconnect?: Maybe<
    UsersOnProductsWhereUniqueInput[] | UsersOnProductsWhereUniqueInput
  >;
  update?: Maybe<
    | UsersOnProductsUpdateWithWhereUniqueWithoutUserInput[]
    | UsersOnProductsUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UsersOnProductsUpsertWithWhereUniqueWithoutUserInput[]
    | UsersOnProductsUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    UsersOnProductsScalarWhereInput[] | UsersOnProductsScalarWhereInput
  >;
  updateMany?: Maybe<
    | UsersOnProductsUpdateManyWithWhereNestedInput[]
    | UsersOnProductsUpdateManyWithWhereNestedInput
  >;
}

export interface UsersOnProductsUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnProductsWhereUniqueInput;
  data: UsersOnProductsUpdateWithoutUserDataInput;
}

export interface UsersOnProductsUpdateWithoutUserDataInput {
  product?: Maybe<ProductUpdateOneRequiredInput>;
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
  ordered?: Maybe<Boolean>;
}

export interface ProductUpdateOneRequiredInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  illustration?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface UsersOnProductsUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnProductsWhereUniqueInput;
  update: UsersOnProductsUpdateWithoutUserDataInput;
  create: UsersOnProductsCreateWithoutUserInput;
}

export interface UsersOnProductsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  nombre?: Maybe<Int>;
  nombre_not?: Maybe<Int>;
  nombre_in?: Maybe<Int[] | Int>;
  nombre_not_in?: Maybe<Int[] | Int>;
  nombre_lt?: Maybe<Int>;
  nombre_lte?: Maybe<Int>;
  nombre_gt?: Maybe<Int>;
  nombre_gte?: Maybe<Int>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  AND?: Maybe<
    UsersOnProductsScalarWhereInput[] | UsersOnProductsScalarWhereInput
  >;
  OR?: Maybe<
    UsersOnProductsScalarWhereInput[] | UsersOnProductsScalarWhereInput
  >;
  NOT?: Maybe<
    UsersOnProductsScalarWhereInput[] | UsersOnProductsScalarWhereInput
  >;
}

export interface UsersOnProductsUpdateManyWithWhereNestedInput {
  where: UsersOnProductsScalarWhereInput;
  data: UsersOnProductsUpdateManyDataInput;
}

export interface UsersOnProductsUpdateManyDataInput {
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
  ordered?: Maybe<Boolean>;
}

export interface SteedUpdateManyWithoutUserInput {
  create?: Maybe<SteedCreateWithoutUserInput[] | SteedCreateWithoutUserInput>;
  delete?: Maybe<SteedWhereUniqueInput[] | SteedWhereUniqueInput>;
  connect?: Maybe<SteedWhereUniqueInput[] | SteedWhereUniqueInput>;
  set?: Maybe<SteedWhereUniqueInput[] | SteedWhereUniqueInput>;
  disconnect?: Maybe<SteedWhereUniqueInput[] | SteedWhereUniqueInput>;
  update?: Maybe<
    | SteedUpdateWithWhereUniqueWithoutUserInput[]
    | SteedUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SteedUpsertWithWhereUniqueWithoutUserInput[]
    | SteedUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SteedScalarWhereInput[] | SteedScalarWhereInput>;
  updateMany?: Maybe<
    SteedUpdateManyWithWhereNestedInput[] | SteedUpdateManyWithWhereNestedInput
  >;
}

export interface SteedUpdateWithWhereUniqueWithoutUserInput {
  where: SteedWhereUniqueInput;
  data: SteedUpdateWithoutUserDataInput;
}

export interface SteedUpdateWithoutUserDataInput {
  pointA?: Maybe<String>;
  pointB?: Maybe<String>;
  description?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  phone?: Maybe<String>;
}

export interface SteedUpsertWithWhereUniqueWithoutUserInput {
  where: SteedWhereUniqueInput;
  update: SteedUpdateWithoutUserDataInput;
  create: SteedCreateWithoutUserInput;
}

export interface SteedScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  pointA?: Maybe<String>;
  pointA_not?: Maybe<String>;
  pointA_in?: Maybe<String[] | String>;
  pointA_not_in?: Maybe<String[] | String>;
  pointA_lt?: Maybe<String>;
  pointA_lte?: Maybe<String>;
  pointA_gt?: Maybe<String>;
  pointA_gte?: Maybe<String>;
  pointA_contains?: Maybe<String>;
  pointA_not_contains?: Maybe<String>;
  pointA_starts_with?: Maybe<String>;
  pointA_not_starts_with?: Maybe<String>;
  pointA_ends_with?: Maybe<String>;
  pointA_not_ends_with?: Maybe<String>;
  pointB?: Maybe<String>;
  pointB_not?: Maybe<String>;
  pointB_in?: Maybe<String[] | String>;
  pointB_not_in?: Maybe<String[] | String>;
  pointB_lt?: Maybe<String>;
  pointB_lte?: Maybe<String>;
  pointB_gt?: Maybe<String>;
  pointB_gte?: Maybe<String>;
  pointB_contains?: Maybe<String>;
  pointB_not_contains?: Maybe<String>;
  pointB_starts_with?: Maybe<String>;
  pointB_not_starts_with?: Maybe<String>;
  pointB_ends_with?: Maybe<String>;
  pointB_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  AND?: Maybe<SteedScalarWhereInput[] | SteedScalarWhereInput>;
  OR?: Maybe<SteedScalarWhereInput[] | SteedScalarWhereInput>;
  NOT?: Maybe<SteedScalarWhereInput[] | SteedScalarWhereInput>;
}

export interface SteedUpdateManyWithWhereNestedInput {
  where: SteedScalarWhereInput;
  data: SteedUpdateManyDataInput;
}

export interface SteedUpdateManyDataInput {
  pointA?: Maybe<String>;
  pointB?: Maybe<String>;
  description?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  phone?: Maybe<String>;
}

export interface UserUpsertWithoutPlatesInput {
  update: UserUpdateWithoutPlatesDataInput;
  create: UserCreateWithoutPlatesInput;
}

export interface UsersOnPlatesUpsertWithWhereUniqueWithoutPlatInput {
  where: UsersOnPlatesWhereUniqueInput;
  update: UsersOnPlatesUpdateWithoutPlatDataInput;
  create: UsersOnPlatesCreateWithoutPlatInput;
}

export interface UsersOnPlatesScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  localisation?: Maybe<String>;
  localisation_not?: Maybe<String>;
  localisation_in?: Maybe<String[] | String>;
  localisation_not_in?: Maybe<String[] | String>;
  localisation_lt?: Maybe<String>;
  localisation_lte?: Maybe<String>;
  localisation_gt?: Maybe<String>;
  localisation_gte?: Maybe<String>;
  localisation_contains?: Maybe<String>;
  localisation_not_contains?: Maybe<String>;
  localisation_starts_with?: Maybe<String>;
  localisation_not_starts_with?: Maybe<String>;
  localisation_ends_with?: Maybe<String>;
  localisation_not_ends_with?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  ordered_not?: Maybe<Boolean>;
  nombre?: Maybe<Int>;
  nombre_not?: Maybe<Int>;
  nombre_in?: Maybe<Int[] | Int>;
  nombre_not_in?: Maybe<Int[] | Int>;
  nombre_lt?: Maybe<Int>;
  nombre_lte?: Maybe<Int>;
  nombre_gt?: Maybe<Int>;
  nombre_gte?: Maybe<Int>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UsersOnPlatesScalarWhereInput[] | UsersOnPlatesScalarWhereInput>;
  OR?: Maybe<UsersOnPlatesScalarWhereInput[] | UsersOnPlatesScalarWhereInput>;
  NOT?: Maybe<UsersOnPlatesScalarWhereInput[] | UsersOnPlatesScalarWhereInput>;
}

export interface UsersOnPlatesUpdateManyWithWhereNestedInput {
  where: UsersOnPlatesScalarWhereInput;
  data: UsersOnPlatesUpdateManyDataInput;
}

export interface UsersOnPlatesUpdateManyDataInput {
  localisation?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface PlatUpdateManyMutationInput {
  name?: Maybe<String>;
  illustration?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface ProductUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  illustration?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface ProductUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  illustration?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface SteedCreateInput {
  id?: Maybe<ID_Input>;
  pointA: String;
  pointB: String;
  description: String;
  ordered: Boolean;
  phone: String;
  user: UserCreateOneWithoutSteedsInput;
}

export interface UserCreateOneWithoutSteedsInput {
  create?: Maybe<UserCreateWithoutSteedsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSteedsInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone: String;
  email?: Maybe<String>;
  password: String;
  role: String;
  plates?: Maybe<UsersOnPlatesCreateManyWithoutUserInput>;
  houses?: Maybe<UsersOnHousesCreateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsCreateManyWithoutUserInput>;
}

export interface UsersOnPlatesCreateManyWithoutUserInput {
  create?: Maybe<
    UsersOnPlatesCreateWithoutUserInput[] | UsersOnPlatesCreateWithoutUserInput
  >;
  connect?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
}

export interface UsersOnPlatesCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  plat: PlatCreateOneWithoutUsersInput;
  localisation: String;
  ordered: Boolean;
  nombre: Int;
  phone: String;
}

export interface PlatCreateOneWithoutUsersInput {
  create?: Maybe<PlatCreateWithoutUsersInput>;
  connect?: Maybe<PlatWhereUniqueInput>;
}

export interface PlatCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  name: String;
  illustration: String;
  description: String;
  price: Float;
}

export interface SteedUpdateInput {
  pointA?: Maybe<String>;
  pointB?: Maybe<String>;
  description?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  phone?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutSteedsInput>;
}

export interface UserUpdateOneRequiredWithoutSteedsInput {
  create?: Maybe<UserCreateWithoutSteedsInput>;
  update?: Maybe<UserUpdateWithoutSteedsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSteedsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSteedsDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  plates?: Maybe<UsersOnPlatesUpdateManyWithoutUserInput>;
  houses?: Maybe<UsersOnHousesUpdateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsUpdateManyWithoutUserInput>;
}

export interface UsersOnPlatesUpdateManyWithoutUserInput {
  create?: Maybe<
    UsersOnPlatesCreateWithoutUserInput[] | UsersOnPlatesCreateWithoutUserInput
  >;
  delete?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
  connect?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
  set?: Maybe<UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput>;
  disconnect?: Maybe<
    UsersOnPlatesWhereUniqueInput[] | UsersOnPlatesWhereUniqueInput
  >;
  update?: Maybe<
    | UsersOnPlatesUpdateWithWhereUniqueWithoutUserInput[]
    | UsersOnPlatesUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UsersOnPlatesUpsertWithWhereUniqueWithoutUserInput[]
    | UsersOnPlatesUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    UsersOnPlatesScalarWhereInput[] | UsersOnPlatesScalarWhereInput
  >;
  updateMany?: Maybe<
    | UsersOnPlatesUpdateManyWithWhereNestedInput[]
    | UsersOnPlatesUpdateManyWithWhereNestedInput
  >;
}

export interface UsersOnPlatesUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnPlatesWhereUniqueInput;
  data: UsersOnPlatesUpdateWithoutUserDataInput;
}

export interface UsersOnPlatesUpdateWithoutUserDataInput {
  plat?: Maybe<PlatUpdateOneRequiredWithoutUsersInput>;
  localisation?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface PlatUpdateOneRequiredWithoutUsersInput {
  create?: Maybe<PlatCreateWithoutUsersInput>;
  update?: Maybe<PlatUpdateWithoutUsersDataInput>;
  upsert?: Maybe<PlatUpsertWithoutUsersInput>;
  connect?: Maybe<PlatWhereUniqueInput>;
}

export interface PlatUpdateWithoutUsersDataInput {
  name?: Maybe<String>;
  illustration?: Maybe<String>;
  description?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface PlatUpsertWithoutUsersInput {
  update: PlatUpdateWithoutUsersDataInput;
  create: PlatCreateWithoutUsersInput;
}

export interface UsersOnPlatesUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnPlatesWhereUniqueInput;
  update: UsersOnPlatesUpdateWithoutUserDataInput;
  create: UsersOnPlatesCreateWithoutUserInput;
}

export interface UserUpsertWithoutSteedsInput {
  update: UserUpdateWithoutSteedsDataInput;
  create: UserCreateWithoutSteedsInput;
}

export interface SteedUpdateManyMutationInput {
  pointA?: Maybe<String>;
  pointB?: Maybe<String>;
  description?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  phone?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone: String;
  email?: Maybe<String>;
  password: String;
  role: String;
  plates?: Maybe<UsersOnPlatesCreateManyWithoutUserInput>;
  houses?: Maybe<UsersOnHousesCreateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsCreateManyWithoutUserInput>;
  steeds?: Maybe<SteedCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  plates?: Maybe<UsersOnPlatesUpdateManyWithoutUserInput>;
  houses?: Maybe<UsersOnHousesUpdateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsUpdateManyWithoutUserInput>;
  steeds?: Maybe<SteedUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
}

export interface UsersOnHousesCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutHousesInput;
  house: HouseCreateOneInput;
  ordered: Boolean;
  localisation: String;
  nombre: Int;
  phone: String;
}

export interface UserCreateOneWithoutHousesInput {
  create?: Maybe<UserCreateWithoutHousesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutHousesInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone: String;
  email?: Maybe<String>;
  password: String;
  role: String;
  plates?: Maybe<UsersOnPlatesCreateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsCreateManyWithoutUserInput>;
  steeds?: Maybe<SteedCreateManyWithoutUserInput>;
}

export interface UsersOnHousesUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutHousesInput>;
  house?: Maybe<HouseUpdateOneRequiredInput>;
  ordered?: Maybe<Boolean>;
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutHousesInput {
  create?: Maybe<UserCreateWithoutHousesInput>;
  update?: Maybe<UserUpdateWithoutHousesDataInput>;
  upsert?: Maybe<UserUpsertWithoutHousesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutHousesDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  plates?: Maybe<UsersOnPlatesUpdateManyWithoutUserInput>;
  products?: Maybe<UsersOnProductsUpdateManyWithoutUserInput>;
  steeds?: Maybe<SteedUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutHousesInput {
  update: UserUpdateWithoutHousesDataInput;
  create: UserCreateWithoutHousesInput;
}

export interface UsersOnHousesUpdateManyMutationInput {
  ordered?: Maybe<Boolean>;
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface UsersOnPlatesCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPlatesInput;
  plat: PlatCreateOneWithoutUsersInput;
  localisation: String;
  ordered: Boolean;
  nombre: Int;
  phone: String;
}

export interface UsersOnPlatesUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPlatesInput>;
  plat?: Maybe<PlatUpdateOneRequiredWithoutUsersInput>;
  localisation?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface UsersOnPlatesUpdateManyMutationInput {
  localisation?: Maybe<String>;
  ordered?: Maybe<Boolean>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
}

export interface UsersOnProductsCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutProductsInput;
  product: ProductCreateOneInput;
  localisation: String;
  nombre: Int;
  phone: String;
  ordered: Boolean;
}

export interface UserCreateOneWithoutProductsInput {
  create?: Maybe<UserCreateWithoutProductsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  name: String;
  phone: String;
  email?: Maybe<String>;
  password: String;
  role: String;
  plates?: Maybe<UsersOnPlatesCreateManyWithoutUserInput>;
  houses?: Maybe<UsersOnHousesCreateManyWithoutUserInput>;
  steeds?: Maybe<SteedCreateManyWithoutUserInput>;
}

export interface UsersOnProductsUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutProductsInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
  ordered?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<UserCreateWithoutProductsInput>;
  update?: Maybe<UserUpdateWithoutProductsDataInput>;
  upsert?: Maybe<UserUpsertWithoutProductsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutProductsDataInput {
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<String>;
  plates?: Maybe<UsersOnPlatesUpdateManyWithoutUserInput>;
  houses?: Maybe<UsersOnHousesUpdateManyWithoutUserInput>;
  steeds?: Maybe<SteedUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutProductsInput {
  update: UserUpdateWithoutProductsDataInput;
  create: UserCreateWithoutProductsInput;
}

export interface UsersOnProductsUpdateManyMutationInput {
  localisation?: Maybe<String>;
  nombre?: Maybe<Int>;
  phone?: Maybe<String>;
  ordered?: Maybe<Boolean>;
}

export interface HouseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HouseWhereInput>;
  AND?: Maybe<HouseSubscriptionWhereInput[] | HouseSubscriptionWhereInput>;
  OR?: Maybe<HouseSubscriptionWhereInput[] | HouseSubscriptionWhereInput>;
  NOT?: Maybe<HouseSubscriptionWhereInput[] | HouseSubscriptionWhereInput>;
}

export interface PlatSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlatWhereInput>;
  AND?: Maybe<PlatSubscriptionWhereInput[] | PlatSubscriptionWhereInput>;
  OR?: Maybe<PlatSubscriptionWhereInput[] | PlatSubscriptionWhereInput>;
  NOT?: Maybe<PlatSubscriptionWhereInput[] | PlatSubscriptionWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface SteedSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SteedWhereInput>;
  AND?: Maybe<SteedSubscriptionWhereInput[] | SteedSubscriptionWhereInput>;
  OR?: Maybe<SteedSubscriptionWhereInput[] | SteedSubscriptionWhereInput>;
  NOT?: Maybe<SteedSubscriptionWhereInput[] | SteedSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UsersOnHousesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UsersOnHousesWhereInput>;
  AND?: Maybe<
    UsersOnHousesSubscriptionWhereInput[] | UsersOnHousesSubscriptionWhereInput
  >;
  OR?: Maybe<
    UsersOnHousesSubscriptionWhereInput[] | UsersOnHousesSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UsersOnHousesSubscriptionWhereInput[] | UsersOnHousesSubscriptionWhereInput
  >;
}

export interface UsersOnPlatesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UsersOnPlatesWhereInput>;
  AND?: Maybe<
    UsersOnPlatesSubscriptionWhereInput[] | UsersOnPlatesSubscriptionWhereInput
  >;
  OR?: Maybe<
    UsersOnPlatesSubscriptionWhereInput[] | UsersOnPlatesSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UsersOnPlatesSubscriptionWhereInput[] | UsersOnPlatesSubscriptionWhereInput
  >;
}

export interface UsersOnProductsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UsersOnProductsWhereInput>;
  AND?: Maybe<
    | UsersOnProductsSubscriptionWhereInput[]
    | UsersOnProductsSubscriptionWhereInput
  >;
  OR?: Maybe<
    | UsersOnProductsSubscriptionWhereInput[]
    | UsersOnProductsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | UsersOnProductsSubscriptionWhereInput[]
    | UsersOnProductsSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface House {
  id: ID_Output;
  illustration: String;
  description?: String;
  localisation: String;
  price: Float;
  date?: DateTimeOutput;
}

export interface HousePromise extends Promise<House>, Fragmentable {
  id: () => Promise<ID_Output>;
  illustration: () => Promise<String>;
  description: () => Promise<String>;
  localisation: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface HouseSubscription
  extends Promise<AsyncIterator<House>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  illustration: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  localisation: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HouseNullablePromise
  extends Promise<House | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  illustration: () => Promise<String>;
  description: () => Promise<String>;
  localisation: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface HouseConnection {
  pageInfo: PageInfo;
  edges: HouseEdge[];
}

export interface HouseConnectionPromise
  extends Promise<HouseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HouseEdge>>() => T;
  aggregate: <T = AggregateHousePromise>() => T;
}

export interface HouseConnectionSubscription
  extends Promise<AsyncIterator<HouseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HouseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHouseSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface HouseEdge {
  node: House;
  cursor: String;
}

export interface HouseEdgePromise extends Promise<HouseEdge>, Fragmentable {
  node: <T = HousePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HouseEdgeSubscription
  extends Promise<AsyncIterator<HouseEdge>>,
    Fragmentable {
  node: <T = HouseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHouse {
  count: Int;
}

export interface AggregateHousePromise
  extends Promise<AggregateHouse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHouseSubscription
  extends Promise<AsyncIterator<AggregateHouse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Plat {
  id: ID_Output;
  name: String;
  illustration: String;
  description: String;
  price: Float;
  date?: DateTimeOutput;
}

export interface PlatPromise extends Promise<Plat>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  illustration: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<UsersOnPlates>>(args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlatSubscription
  extends Promise<AsyncIterator<Plat>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  illustration: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  users: <T = Promise<AsyncIterator<UsersOnPlatesSubscription>>>(args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlatNullablePromise
  extends Promise<Plat | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  illustration: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<UsersOnPlates>>(args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UsersOnPlates {
  id: ID_Output;
  localisation: String;
  ordered: Boolean;
  nombre: Int;
  phone: String;
  date?: DateTimeOutput;
}

export interface UsersOnPlatesPromise
  extends Promise<UsersOnPlates>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  plat: <T = PlatPromise>() => T;
  localisation: () => Promise<String>;
  ordered: () => Promise<Boolean>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UsersOnPlatesSubscription
  extends Promise<AsyncIterator<UsersOnPlates>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  plat: <T = PlatSubscription>() => T;
  localisation: () => Promise<AsyncIterator<String>>;
  ordered: () => Promise<AsyncIterator<Boolean>>;
  nombre: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UsersOnPlatesNullablePromise
  extends Promise<UsersOnPlates | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  plat: <T = PlatPromise>() => T;
  localisation: () => Promise<String>;
  ordered: () => Promise<Boolean>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  name: String;
  phone: String;
  email?: String;
  password: String;
  role: String;
  date?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  plates: <T = FragmentableArray<UsersOnPlates>>(args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  houses: <T = FragmentableArray<UsersOnHouses>>(args?: {
    where?: UsersOnHousesWhereInput;
    orderBy?: UsersOnHousesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = FragmentableArray<UsersOnProducts>>(args?: {
    where?: UsersOnProductsWhereInput;
    orderBy?: UsersOnProductsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  steeds: <T = FragmentableArray<Steed>>(args?: {
    where?: SteedWhereInput;
    orderBy?: SteedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  plates: <T = Promise<AsyncIterator<UsersOnPlatesSubscription>>>(args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  houses: <T = Promise<AsyncIterator<UsersOnHousesSubscription>>>(args?: {
    where?: UsersOnHousesWhereInput;
    orderBy?: UsersOnHousesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = Promise<AsyncIterator<UsersOnProductsSubscription>>>(args?: {
    where?: UsersOnProductsWhereInput;
    orderBy?: UsersOnProductsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  steeds: <T = Promise<AsyncIterator<SteedSubscription>>>(args?: {
    where?: SteedWhereInput;
    orderBy?: SteedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  plates: <T = FragmentableArray<UsersOnPlates>>(args?: {
    where?: UsersOnPlatesWhereInput;
    orderBy?: UsersOnPlatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  houses: <T = FragmentableArray<UsersOnHouses>>(args?: {
    where?: UsersOnHousesWhereInput;
    orderBy?: UsersOnHousesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  products: <T = FragmentableArray<UsersOnProducts>>(args?: {
    where?: UsersOnProductsWhereInput;
    orderBy?: UsersOnProductsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  steeds: <T = FragmentableArray<Steed>>(args?: {
    where?: SteedWhereInput;
    orderBy?: SteedOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UsersOnHouses {
  id: ID_Output;
  ordered: Boolean;
  localisation: String;
  nombre: Int;
  phone: String;
  date?: DateTimeOutput;
}

export interface UsersOnHousesPromise
  extends Promise<UsersOnHouses>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  house: <T = HousePromise>() => T;
  ordered: () => Promise<Boolean>;
  localisation: () => Promise<String>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UsersOnHousesSubscription
  extends Promise<AsyncIterator<UsersOnHouses>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  house: <T = HouseSubscription>() => T;
  ordered: () => Promise<AsyncIterator<Boolean>>;
  localisation: () => Promise<AsyncIterator<String>>;
  nombre: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UsersOnHousesNullablePromise
  extends Promise<UsersOnHouses | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  house: <T = HousePromise>() => T;
  ordered: () => Promise<Boolean>;
  localisation: () => Promise<String>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UsersOnProducts {
  id: ID_Output;
  localisation: String;
  nombre: Int;
  phone: String;
  date?: DateTimeOutput;
  ordered: Boolean;
}

export interface UsersOnProductsPromise
  extends Promise<UsersOnProducts>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  localisation: () => Promise<String>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  ordered: () => Promise<Boolean>;
}

export interface UsersOnProductsSubscription
  extends Promise<AsyncIterator<UsersOnProducts>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  localisation: () => Promise<AsyncIterator<String>>;
  nombre: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  ordered: () => Promise<AsyncIterator<Boolean>>;
}

export interface UsersOnProductsNullablePromise
  extends Promise<UsersOnProducts | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  product: <T = ProductPromise>() => T;
  localisation: () => Promise<String>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  ordered: () => Promise<Boolean>;
}

export interface Product {
  id: ID_Output;
  name: String;
  description: String;
  illustration: String;
  price: Float;
  date?: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  illustration: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  illustration: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  illustration: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface Steed {
  id: ID_Output;
  pointA: String;
  pointB: String;
  description: String;
  date?: DateTimeOutput;
  ordered: Boolean;
  phone: String;
}

export interface SteedPromise extends Promise<Steed>, Fragmentable {
  id: () => Promise<ID_Output>;
  pointA: () => Promise<String>;
  pointB: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  ordered: () => Promise<Boolean>;
  phone: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface SteedSubscription
  extends Promise<AsyncIterator<Steed>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  pointA: () => Promise<AsyncIterator<String>>;
  pointB: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  ordered: () => Promise<AsyncIterator<Boolean>>;
  phone: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface SteedNullablePromise
  extends Promise<Steed | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  pointA: () => Promise<String>;
  pointB: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  ordered: () => Promise<Boolean>;
  phone: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface PlatConnection {
  pageInfo: PageInfo;
  edges: PlatEdge[];
}

export interface PlatConnectionPromise
  extends Promise<PlatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlatEdge>>() => T;
  aggregate: <T = AggregatePlatPromise>() => T;
}

export interface PlatConnectionSubscription
  extends Promise<AsyncIterator<PlatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlatEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlatSubscription>() => T;
}

export interface PlatEdge {
  node: Plat;
  cursor: String;
}

export interface PlatEdgePromise extends Promise<PlatEdge>, Fragmentable {
  node: <T = PlatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlatEdgeSubscription
  extends Promise<AsyncIterator<PlatEdge>>,
    Fragmentable {
  node: <T = PlatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlat {
  count: Int;
}

export interface AggregatePlatPromise
  extends Promise<AggregatePlat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlatSubscription
  extends Promise<AsyncIterator<AggregatePlat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SteedConnection {
  pageInfo: PageInfo;
  edges: SteedEdge[];
}

export interface SteedConnectionPromise
  extends Promise<SteedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SteedEdge>>() => T;
  aggregate: <T = AggregateSteedPromise>() => T;
}

export interface SteedConnectionSubscription
  extends Promise<AsyncIterator<SteedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SteedEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSteedSubscription>() => T;
}

export interface SteedEdge {
  node: Steed;
  cursor: String;
}

export interface SteedEdgePromise extends Promise<SteedEdge>, Fragmentable {
  node: <T = SteedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SteedEdgeSubscription
  extends Promise<AsyncIterator<SteedEdge>>,
    Fragmentable {
  node: <T = SteedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSteed {
  count: Int;
}

export interface AggregateSteedPromise
  extends Promise<AggregateSteed>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSteedSubscription
  extends Promise<AsyncIterator<AggregateSteed>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsersOnHousesConnection {
  pageInfo: PageInfo;
  edges: UsersOnHousesEdge[];
}

export interface UsersOnHousesConnectionPromise
  extends Promise<UsersOnHousesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UsersOnHousesEdge>>() => T;
  aggregate: <T = AggregateUsersOnHousesPromise>() => T;
}

export interface UsersOnHousesConnectionSubscription
  extends Promise<AsyncIterator<UsersOnHousesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsersOnHousesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsersOnHousesSubscription>() => T;
}

export interface UsersOnHousesEdge {
  node: UsersOnHouses;
  cursor: String;
}

export interface UsersOnHousesEdgePromise
  extends Promise<UsersOnHousesEdge>,
    Fragmentable {
  node: <T = UsersOnHousesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UsersOnHousesEdgeSubscription
  extends Promise<AsyncIterator<UsersOnHousesEdge>>,
    Fragmentable {
  node: <T = UsersOnHousesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUsersOnHouses {
  count: Int;
}

export interface AggregateUsersOnHousesPromise
  extends Promise<AggregateUsersOnHouses>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsersOnHousesSubscription
  extends Promise<AsyncIterator<AggregateUsersOnHouses>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsersOnPlatesConnection {
  pageInfo: PageInfo;
  edges: UsersOnPlatesEdge[];
}

export interface UsersOnPlatesConnectionPromise
  extends Promise<UsersOnPlatesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UsersOnPlatesEdge>>() => T;
  aggregate: <T = AggregateUsersOnPlatesPromise>() => T;
}

export interface UsersOnPlatesConnectionSubscription
  extends Promise<AsyncIterator<UsersOnPlatesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsersOnPlatesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsersOnPlatesSubscription>() => T;
}

export interface UsersOnPlatesEdge {
  node: UsersOnPlates;
  cursor: String;
}

export interface UsersOnPlatesEdgePromise
  extends Promise<UsersOnPlatesEdge>,
    Fragmentable {
  node: <T = UsersOnPlatesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UsersOnPlatesEdgeSubscription
  extends Promise<AsyncIterator<UsersOnPlatesEdge>>,
    Fragmentable {
  node: <T = UsersOnPlatesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUsersOnPlates {
  count: Int;
}

export interface AggregateUsersOnPlatesPromise
  extends Promise<AggregateUsersOnPlates>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsersOnPlatesSubscription
  extends Promise<AsyncIterator<AggregateUsersOnPlates>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UsersOnProductsConnection {
  pageInfo: PageInfo;
  edges: UsersOnProductsEdge[];
}

export interface UsersOnProductsConnectionPromise
  extends Promise<UsersOnProductsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UsersOnProductsEdge>>() => T;
  aggregate: <T = AggregateUsersOnProductsPromise>() => T;
}

export interface UsersOnProductsConnectionSubscription
  extends Promise<AsyncIterator<UsersOnProductsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsersOnProductsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsersOnProductsSubscription>() => T;
}

export interface UsersOnProductsEdge {
  node: UsersOnProducts;
  cursor: String;
}

export interface UsersOnProductsEdgePromise
  extends Promise<UsersOnProductsEdge>,
    Fragmentable {
  node: <T = UsersOnProductsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UsersOnProductsEdgeSubscription
  extends Promise<AsyncIterator<UsersOnProductsEdge>>,
    Fragmentable {
  node: <T = UsersOnProductsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUsersOnProducts {
  count: Int;
}

export interface AggregateUsersOnProductsPromise
  extends Promise<AggregateUsersOnProducts>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsersOnProductsSubscription
  extends Promise<AsyncIterator<AggregateUsersOnProducts>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface HouseSubscriptionPayload {
  mutation: MutationType;
  node: House;
  updatedFields: String[];
  previousValues: HousePreviousValues;
}

export interface HouseSubscriptionPayloadPromise
  extends Promise<HouseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HousePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HousePreviousValuesPromise>() => T;
}

export interface HouseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HouseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HouseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HousePreviousValuesSubscription>() => T;
}

export interface HousePreviousValues {
  id: ID_Output;
  illustration: String;
  description?: String;
  localisation: String;
  price: Float;
  date?: DateTimeOutput;
}

export interface HousePreviousValuesPromise
  extends Promise<HousePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  illustration: () => Promise<String>;
  description: () => Promise<String>;
  localisation: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface HousePreviousValuesSubscription
  extends Promise<AsyncIterator<HousePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  illustration: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  localisation: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PlatSubscriptionPayload {
  mutation: MutationType;
  node: Plat;
  updatedFields: String[];
  previousValues: PlatPreviousValues;
}

export interface PlatSubscriptionPayloadPromise
  extends Promise<PlatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlatPreviousValuesPromise>() => T;
}

export interface PlatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlatPreviousValuesSubscription>() => T;
}

export interface PlatPreviousValues {
  id: ID_Output;
  name: String;
  illustration: String;
  description: String;
  price: Float;
  date?: DateTimeOutput;
}

export interface PlatPreviousValuesPromise
  extends Promise<PlatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  illustration: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface PlatPreviousValuesSubscription
  extends Promise<AsyncIterator<PlatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  illustration: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  illustration: String;
  price: Float;
  date?: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  illustration: () => Promise<String>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  illustration: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SteedSubscriptionPayload {
  mutation: MutationType;
  node: Steed;
  updatedFields: String[];
  previousValues: SteedPreviousValues;
}

export interface SteedSubscriptionPayloadPromise
  extends Promise<SteedSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SteedPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SteedPreviousValuesPromise>() => T;
}

export interface SteedSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SteedSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SteedSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SteedPreviousValuesSubscription>() => T;
}

export interface SteedPreviousValues {
  id: ID_Output;
  pointA: String;
  pointB: String;
  description: String;
  date?: DateTimeOutput;
  ordered: Boolean;
  phone: String;
}

export interface SteedPreviousValuesPromise
  extends Promise<SteedPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  pointA: () => Promise<String>;
  pointB: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  ordered: () => Promise<Boolean>;
  phone: () => Promise<String>;
}

export interface SteedPreviousValuesSubscription
  extends Promise<AsyncIterator<SteedPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  pointA: () => Promise<AsyncIterator<String>>;
  pointB: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  ordered: () => Promise<AsyncIterator<Boolean>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  phone: String;
  email?: String;
  password: String;
  role: String;
  date?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UsersOnHousesSubscriptionPayload {
  mutation: MutationType;
  node: UsersOnHouses;
  updatedFields: String[];
  previousValues: UsersOnHousesPreviousValues;
}

export interface UsersOnHousesSubscriptionPayloadPromise
  extends Promise<UsersOnHousesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UsersOnHousesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsersOnHousesPreviousValuesPromise>() => T;
}

export interface UsersOnHousesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsersOnHousesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsersOnHousesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsersOnHousesPreviousValuesSubscription>() => T;
}

export interface UsersOnHousesPreviousValues {
  id: ID_Output;
  ordered: Boolean;
  localisation: String;
  nombre: Int;
  phone: String;
  date?: DateTimeOutput;
}

export interface UsersOnHousesPreviousValuesPromise
  extends Promise<UsersOnHousesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ordered: () => Promise<Boolean>;
  localisation: () => Promise<String>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UsersOnHousesPreviousValuesSubscription
  extends Promise<AsyncIterator<UsersOnHousesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ordered: () => Promise<AsyncIterator<Boolean>>;
  localisation: () => Promise<AsyncIterator<String>>;
  nombre: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UsersOnPlatesSubscriptionPayload {
  mutation: MutationType;
  node: UsersOnPlates;
  updatedFields: String[];
  previousValues: UsersOnPlatesPreviousValues;
}

export interface UsersOnPlatesSubscriptionPayloadPromise
  extends Promise<UsersOnPlatesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UsersOnPlatesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsersOnPlatesPreviousValuesPromise>() => T;
}

export interface UsersOnPlatesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsersOnPlatesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsersOnPlatesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsersOnPlatesPreviousValuesSubscription>() => T;
}

export interface UsersOnPlatesPreviousValues {
  id: ID_Output;
  localisation: String;
  ordered: Boolean;
  nombre: Int;
  phone: String;
  date?: DateTimeOutput;
}

export interface UsersOnPlatesPreviousValuesPromise
  extends Promise<UsersOnPlatesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  localisation: () => Promise<String>;
  ordered: () => Promise<Boolean>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UsersOnPlatesPreviousValuesSubscription
  extends Promise<AsyncIterator<UsersOnPlatesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  localisation: () => Promise<AsyncIterator<String>>;
  ordered: () => Promise<AsyncIterator<Boolean>>;
  nombre: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UsersOnProductsSubscriptionPayload {
  mutation: MutationType;
  node: UsersOnProducts;
  updatedFields: String[];
  previousValues: UsersOnProductsPreviousValues;
}

export interface UsersOnProductsSubscriptionPayloadPromise
  extends Promise<UsersOnProductsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UsersOnProductsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsersOnProductsPreviousValuesPromise>() => T;
}

export interface UsersOnProductsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsersOnProductsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsersOnProductsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsersOnProductsPreviousValuesSubscription>() => T;
}

export interface UsersOnProductsPreviousValues {
  id: ID_Output;
  localisation: String;
  nombre: Int;
  phone: String;
  date?: DateTimeOutput;
  ordered: Boolean;
}

export interface UsersOnProductsPreviousValuesPromise
  extends Promise<UsersOnProductsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  localisation: () => Promise<String>;
  nombre: () => Promise<Int>;
  phone: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  ordered: () => Promise<Boolean>;
}

export interface UsersOnProductsPreviousValuesSubscription
  extends Promise<AsyncIterator<UsersOnProductsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  localisation: () => Promise<AsyncIterator<String>>;
  nombre: () => Promise<AsyncIterator<Int>>;
  phone: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  ordered: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UsersOnPlates",
    embedded: false
  },
  {
    name: "UsersOnHouses",
    embedded: false
  },
  {
    name: "UsersOnProducts",
    embedded: false
  },
  {
    name: "Plat",
    embedded: false
  },
  {
    name: "House",
    embedded: false
  },
  {
    name: "Steed",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
